[tables]
tables=assets,assets_keywords,assets_metadata,keywords,metadata,thumbnails,posters

[build_cache_tables]
assets=CREATE TABLE assets (asset_id INTEGER PRIMARY KEY, repo_n TEXT NOT NULL, uri TEXT NOT NULL, uri_path TEXT NOT NULL, asset_n TEXT NOT NULL, parent_d TEXT NOT NULL, asset_d TEXT NOT NULL);
keywords=CREATE TABLE keywords (keyword_id INTEGER PRIMARY KEY, keyword TEXT NOT NULL, UNIQUE (KEYWORD));
metadata=CREATE TABLE metadata (metadata_id INTEGER PRIMARY KEY, metadata_key TEXT NOT NULL, metadata_value TEXT NOT NULL, metadata_num_value REAL);
assets_keywords=CREATE TABLE assets_keywords (asset_id integer, keyword_id integer, primary key (asset_id, keyword_id));
assets_metadata=CREATE TABLE assets_metadata (asset_id integer, metadata_id integer, primary key (asset_id, metadata_id));
thumbnails=CREATE TABLE thumbnails (asset_id integer, version TEXT NOT NULL, thumbnails_p TEXT NOT NULL, primary key (asset_id, version));
posters=CREATE TABLE posters (asset_id integer, version TEXT NOT NULL, poster_p TEXT NOT NULL, primary key (asset_id, version));

[asset_obj_from_url]
asset_d_from_uri=SELECT parent_d, asset_n FROM assets WHERE uri=?;

[add_keywords_to_asset]
asset_id_from_uri=SELECT asset_id FROM assets WHERE uri=?;

[flush_asset_keywords_from_cache]
flush_assets_keywords=DELETE FROM assets_keywords WHERE asset_id = ?;

[flush_asset_metadata_from_cache]
flush_assets_metadata=DELETE FROM assets_metadata WHERE asset_id = ?;

[flush_asset_id_from_cache]
flush_asset_id=DELETE FROM assets WHERE asset_id = ?;

[disambiguate_uri]
uri_path_exists=SELECT uri_path FROM assets WHERE repo_n = ? AND uri_path LIKE ?;
full_uri_exists=SELECT uri FROM assets WHERE uri = ?;
asset_name_exists=SELECT asset_n FROM assets WHERE repo_n = ? AND asset_n = ?;
get_uri_path_from_asset_n=SELECT uri_path FROM assets WHERE repo_n=? AND asset_n=?;

[cache_asset]
insert_into_assets=INSERT INTO assets (asset_id, uri, uri_path, repo_n, asset_n, parent_d, asset_d) VALUES (NULL, ?, ?, ?, ?, ?, ?);
asset_id_from_last_row_id=SELECT asset_id FROM assets WHERE rowid = ?;

[cache_keyword]
cache_keyword=INSERT OR IGNORE INTO keywords (keyword_id, keyword) VALUES (NULL, ?);
cache_keyword_get_keyword_id=SELECT keyword_id FROM keywords WHERE keyword = ?;
cache_keyword_assets_keywords=INSERT OR IGNORE INTO assets_keywords (asset_id, keyword_id) VALUES (?, ?);

[cache_metadata]
cache_asset_metadata=INSERT OR IGNORE INTO metadata (metadata_id, metadata_key, metadata_value, metadata_num_value) VALUES (NULL, ?, ?, ?);
cache_asset_get_metadata_id=SELECT metadata_id FROM metadata WHERE metadata_key = ? AND metadata_value = ?;
cache_asset_asset_metadata=INSERT OR IGNORE INTO assets_metadata (asset_id, metadata_id) VALUES (?, ?);

[cache_thumbnails]
asset_obj_from_id=SELECT parent_d, asset_n FROM assets WHERE asset_id=?;

[cache_thumbnail]
list_thumbnail=SELECT asset_id, version FROM thumbnails WHERE asset_id = ? AND version = ?;
update_thumbnail=UPDATE thumbnails SET thumbnails_p = ? WHERE asset_id = ? AND version = ?;
cache_thumbnail=INSERT INTO thumbnails (thumbnails_p, asset_id, version) VALUES (?, ?, ?);

[cache_posters]
asset_obj_from_id=SELECT parent_d, asset_n FROM assets WHERE asset_id=?;

[cache_poster]
list_poster=SELECT asset_id, version FROM posters WHERE asset_id = ? AND version = ?;
update_poster=UPDATE posters SET poster_p = ? WHERE asset_id = ? AND version = ?;
cache_poster=INSERT INTO posters (poster_p, asset_id, version) VALUES (?, ?, ?);

[asset_ids_from_uri_path]
asset_ids_from_uri_path=SELECT asset_id FROM assets WHERE uri_path like ?;
asset_ids_from_uri_path_and_name=SELECT asset_id FROM assets WHERE uri_path like ? AND asset_n = ?;

[asset_id_from_uri]
asset_id_from_uri=SELECT asset_id FROM assets WHERE uri = ?;

[list_keywords]
list_keywords_by_uri_path=SELECT DISTINCT keyword FROM keywords JOIN assets_keywords ON keywords.keyword_id = assets_keywords.keyword_id JOIN assets ON assets.asset_id = assets_keywords.asset_id WHERE repo_n = ? AND uri_path LIKE ?;
list_keywords_by_uri_path_and_name=SELECT DISTINCT keyword FROM keywords JOIN assets_keywords ON keywords.keyword_id = assets_keywords.keyword_id JOIN assets ON assets.asset_id = assets_keywords.asset_id WHERE repo_n = ? AND uri_path LIKE ? AND asset_n = ?;

[list_metadata_keys]
list_metadata_keys_by_uri_path=SELECT DISTINCT metadata_key FROM metadata JOIN assets_metadata ON metadata.metadata_id = assets_metadata.metadata_id JOIN assets ON assets.asset_id = assets_metadata.asset_id WHERE repo_n = ? AND uri_path LIKE ?;
list_metadata_keys_by_uri_path_and_name=SELECT DISTINCT metadata_key FROM metadata JOIN assets_metadata ON metadata.metadata_id = assets_metadata.metadata_id JOIN assets ON assets.asset_id = assets_metadata.asset_id WHERE repo_n = ? AND uri_path LIKE ? and asset_n = ?;

[list_notes]
asset_parent_dir_and_name_from_uri=SELECT parent_d, asset_n FROM assets WHERE uri=?;

[sql]
delete_cache_list_tables=SELECT name FROM sqlite_master WHERE type='table';
delete_cache_drop_tables=DROP TABLE {table};
flush_repo_from_cache_list_asset_ids=SELECT asset_id FROM assets WHERE repo_n = ?;
asset_obj_from_asset_id=SELECT name parent_d FROM assets WHERE asset_id = ?;
asset_id_from_uri_path_and_name=SELECT asset_id FROM assets WHERE
asset_ids_from_keywords_using_or=SELECT assets_keywords.asset_id FROM assets_keywords JOIN keywords ON keywords.keyword_id = assets_keywords.keyword_id WHERE {where_clause};
asset_ids_from_keywords_using_and=SELECT assets_keywords.asset_id FROM assets_keywords INNER JOIN keywords ON keywords.keyword_id = assets_keywords.keyword_id WHERE {where_clause} GROUP BY assets_keywords.asset_id HAVING COUNT(1) = {count};
asset_ids_from_metadata_keys_using_or=SELECT assets_metadata.asset_id FROM assets_metadata JOIN metadata ON metadata.metadata_id = assets_metadata.metadata_id WHERE {where_clause};
asset_ids_from_metadata_keys_using_and=SELECT assets_metadata.asset_id FROM assets_metadata INNER JOIN metadata ON metadata.metadata_id = assets_metadata.metadata_id WHERE {where_clause} GROUP BY assets_metadata.asset_id HAVING COUNT(1) = {count};
asset_ids_from_metadata_key_and_values_using_or=SELECT assets_metadata.asset_id FROM assets_metadata JOIN metadata ON metadata.metadata_id = assets_metadata.metadata_id WHERE {where_clause};
asset_ids_from_metadata_key_and_values_using_and=SELECT assets_metadata.asset_id FROM assets_metadata INNER JOIN metadata ON metadata.metadata_id = assets_metadata.metadata_id WHERE {where_clause};
asset_ids_from_metadata_key_and_value=SELECT assets.asset_id FROM assets JOIN assets_metadata ON assets.asset_id = assets_metadata.asset_id JOIN metadata ON metadata.metadata_id = assets_metadata.metadata_id WHERE
list_asset_paths=SELECT asset_d FROM assets WHERE asset_id IN
list_asset_objs_get_asset=SELECT parent_d, asset_d, asset_n, uri_path FROM assets WHERE repo_n = ? AND asset_id IN ({range});
asset_uri_from_path=SELECT uri FROM assets WHERE asset_d = ?;
asset_uri_path_from_path=SELECT uri_path FROM assets WHERE asset_d = ?;
list_keywords_all_keywords=SELECT keyword FROM keywords;
delete_keywords=DELETE FROM assets_keywords WHERE asset_id = ? AND keyword_id = ?;
