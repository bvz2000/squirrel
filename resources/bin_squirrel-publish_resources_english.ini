[error_codes]
100=Incorrect arguments. Use the -h or --help options for more information.
101=The source file or directory you specified does not exist: ({{COLOR_RED}}{source}{{COLOR_NONE}})
104=The thumbnail you specified does not exist: ({{COLOR_RED}}{thumbnail_file}{{COLOR_NONE}})
105=The thumbnails you specified do not conform to the correct name. Valid thumbnail files would be of the following format: {{COLOR_GREEN}}{name}.#.ext{{COLOR_NONE}} where # is any number of digits (required even if it is only a single file) and ext is any file extension.\n\nThe non-matching thumbnail is: ({{COLOR_RED}}{thumbnail_file}{{COLOR_NONE}})
106=You provided a poster frame number ({{COLOR_RED}}{frame}{{COLOR_NONE}}) but did not provide any thumbnails.
107=The thumbnail frame you provided ({{COLOR_RED}}{frame}{{COLOR_NONE}}) does not exist in the thumbnails you provided.

[description]
Publish the given file or directory into the given repo (or the default repo if no repo is specified).

[usage]
%(prog)s <source files or directory> [options]

[options-source]
short_flag = source
long_flag =
action = store
dest =
default =
type = str
metavar = source
nargs = 1
required = False
description = The source file or directory you wish to publish.

[options-tag]
short_flag = -T
long_flag = --token
action = store
dest = token
default =
type = str
metavar = token
nargs = 1
required = False
description = The token identifying where in the repo this directory should be published. This is in the form of a UNIX-style relative path from the top of the repo to the leaf level. For example: /assets/bldg/commercial/ (note that this is functionally identical to assets/bldg/commercial. The leading and trailing slashes are completely optional). If this path does not exist as a valid repo structure (see squirrel schema -h or the documentation for more information) then an error will be raised. If omitted, the token will be taken from the source directory.

[options-repo]
short_flag = -r
long_flag = --repo
action = store
dest = repo
default =
type = str
metavar = repo
nargs = 1
required = False
description = The repository you wish to pubish into. If omitted, the default repository will be used.

[options-metadata]
short_flag = -m
long_flag = --metadata
action = store
dest = metadata
default =
type = str
metavar = metadata
nargs = +
required = False
description = An unlimited number of key=value pairs of arbitrary metadata to add to the publish. This would be given in the format: -m key1=value1 key2=value2 ... keyN=valueN. Note that there are no spaces between the key and the value. If you want the metadata to have spaces in it, use quotes to enclose the value. The key should not have spaces. If for some reason you must have spaces in the key, enclose the key in quotes as well. This data will be stored with the metadata for the version being published.

[options-keywords]
short_flag = -k
long_flag = --keywords
action = store
dest = keywords
default =
type = str
metavar = keywords
nargs = +
required = False
description = An unlimited number of keywords to add to the publish. This would be given in the format: -k keyword1 keyword2 ... keywordN. Keywords should not have spaces in them. If for some reason you want to use spaces, enclose the keyword in quotes. This data will be stored with the metadata for the version being published.

[options-notes]
short_flag = -n
long_flag = --notes
action = store
dest = notes
default =
type = str
metavar = notes
nargs = 1
required = False
description = When publishing, this is an optional set of notes to include with the publish. Enclose the notes in quotes.

[options-thumbnails]
short_flag = -t
long_flag = --thumbnails
action = store
dest = thumbnails
default =
type = str
metavar = thumbnails
nargs = 1
required = False
description = A list of thumbnail files using a standard frame range notation (ex: thumbs.1-180.png). These files MUST conform to the following naming convention: <asset_name>.#.<ext>  where the <asset_name> matches the name of the asset. # is a frame number (you may use any amount of padding desired). You must include a frame number even if it is only a single file. <ext> is the file name extension.

[options-poster]
short_flag = -P
long_flag = --poster-frame
action = store
dest = poster_frame
default =
type = int
metavar = frame
nargs = 1
required = False
description = Optional poster frame number when supplying thumbnails. Only relevant if supplying thumbnails.

[options-merge]
short_flag = -M
long_flag = --no-merge
action = store_true
dest = nomerge
default = False
type = bool
metavar =
nargs =
required = False
description = If used, this flag will prevent any previously published files from migrating to the latest published version. Use if you want a "fresh" publish with no legacy files in it.

[options-pins]
short_flag = -p
long_flag = --pin
action = append
dest = pins
default =
type = str
metavar = pin-name
nargs = 1
required = False
description = An unlimited number of pins (named symlinks that will point to the the version being stored). This would be given in the format: -p pin1 -p pin2 ... -p pinN

[options-verify]
short_flag = -v
long_flag = --verify
action = store_true
dest = verify
default = False
type = bool
metavar =
nargs =
required = False
description = Do a verified copy. If enabled, an md5 checksum will be made of each source file copied and compared to the copied version. If a discrepancy is found, an error is raised. This can slow down the copy process anywhere from a little to a lot depending on the number of files and their sizes.

[options-language]
short_flag = -l
long_flag = --language
action = store
dest = language
default = english
type = str
metavar = language
nargs = 1
required = False
description = Use this language. If none given, or if the language is not installed, defaults to 'english'.
