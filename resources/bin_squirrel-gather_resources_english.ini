[error_codes]
100=Incorrect arguments. Use the -h or --help options for more information.
101=At least one of the source files does not exist: ({path}).
102=The destination directory does not exist: ({path}).
103=The destination path exists, but is not a directory: ({path}).
104=At least one of the source files is actually a directory (only files are accepted): ({path}).

[messages]
copy_header=About to copy the following:\n
copy=source: {source}\n    to: {dest}\n
nothing_to_copy=No files to gather.

[description]
Given a list of files and/or directories and a destination, gather the files to this diestination, sorting them into sub-directories based on file type. This is not the same as squirrel-store which does versioning, but no sorting. This tool does sorting, but no versioning. In a typical workflow, you would gather the files to a temporary location using this tool, then use squirrel-store to permanently store those files (with versioning) to a final destination.

[usage]
%(prog)s <source files or directories> <destination directory> [options]

[options-source]
short_flag = source
long_flag =
action = store
dest =
default =
type = str
metavar =
nargs = +
required = True
description = The source files you wish to gather. You may enter as many files as you like. Does not accept directories. Use file globbing (example: /dir/to/gather/*) to indicate all files in a single directory. If you want to include all the subdirectories of a file, use this format: on Linux or MacOS (Windows is not supprted at ths time), first type "shopt -s globstar"  <- Note that this only works in the bash shell 4 and higher. Then type squirrel-gather /path/to/dir/you/want/to/recusirvely/gather/** /dest/path (followed by any options you need).

[options-destination]
short_flag = destination
long_flag =
action = store
dest = dest
default =
type = str
metavar = destination
nargs = 1
required = True
description = The destination directory where you want the file(s) gathered to. This is a directory where the files will be gathered to. The directory must already exist. If there are files in this directory, they will not be overwritten. Any files being gathered that may clash with already existing files will be renamed so as not to overwrite the existing files.

[options-mapping]
short_flag = -m
long_flag = --mapping
action = store
dest = mapping
default =
type = str
metavar = metadata
nargs = +
required = False
description = An unlimited number of key=value pairs defining where different file types will be sorted to. For example, if you want .tif files to be stored in a sub-directory ./images/source, you would use the following: -m tif=images/source. You may enter as many key=value pairs as you like by using the following format: -m file_type1=relative_path1 file_type2=relative_path2 ... file_typeN=relative_pathN. Note that there are no spaces between the key and the value. If you must have spaces in the file paths, use quotes to enclose the path. The file type should never have spaces. If you skip this option, a built-in default mapping will be used.

[options-udim_identifier]
short_flag = -u
long_flag = --udim-identifier
action = store
dest = udim_identifier
default = <UDIM>
type = str
metavar = pattern
nargs = 1
required = False
description = An optional identifier for how UDIM's are represented in file names. If omitted, defaults to "<UDIM>".

[options-loose_udim_format]
short_flag = -l
long_flag = --loose-udim-format
action = store_true
dest = loose_udim_format
default = False
type = bool
metavar =
nargs =
required = False
description = Do not make UDIM's conform to the #### format, where the starting value is 1001. If used, then the UDIM must start with four digits, but can then contain any extra characters after this. Substance Painter allows this for example. Note, setting this to False may lead to somewhat erroneous identification of UDIM's in files, so - unless absolutely needed - this option should be avoided.

[options-padding]
short_flag = -p
long_flag = --padding
action = store
dest = padding
default =
type = int
metavar = padding
nargs = 1
required = False
description = The amount of padding to use when expanding frame specs (i.e. expanding filename.1-10.exr could have the first file be named: filename.1.exr OR it could be named filename.01.exr). If omitted, then the padding will be determined from the longest number in the sequence.

[options-match_hash_length]
short_flag = -L
long_flag = --match-hash-length
action = store_true
dest = match_hash_length
default = False
type = bool
metavar =
nargs =
required = False
description = If used, and if the hash symbol (#) is used to represent a sequence number, then the number of digits in the sequence portion of a file name MUST match the number of hashes. If omitted, then a single hash would match any number of digits. For example: if this option is used then filename.#.exr would only match files with a single digit sequence number (i.e. filename.1.exr and filename.2.exr would match, but NOT filename.10.exr). If omitted, then any sequence number, no matter how long, would match.

[options-skip_published]
short_flag = -s
long_flag = --skip-published
action = store_true
dest = skip_published
default = False
type = bool
metavar =
nargs =
required = False
description = If used, any files that are already being managed by the publishing system will not be gathered.

[options-repo]
short_flag = -r
long_flag = --repo
action = store
dest = repo
default =
type = str
metavar =
nargs = +
required = False
description = If -s/--skip-published is used, then this option can limit the repositories that are checked. Pass in the name of repositories to check to see if a file has already been published. More than one repository may be supplied in the format -r repo_name1 repo_name2 ... repo_nameN. If omitted and -s/--skip_published is used, then all repos will be checked.
