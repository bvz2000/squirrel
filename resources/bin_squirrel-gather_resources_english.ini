[error_codes]
100=Incorrect arguments. Use the -h or --help options for more information.
101=At least one of the source files or directories does not exist: ({path}).
102=The destination directory does not exist: ({path}).
103=The destination path exists, but is not a directory: ({path}).

[description]
Given a list of files and/or directories and a destination, gather the files to this diestination, sorting them into sub-directories based on file type. This is not the same as squirrel-store which does versioning, but no sorting. This tool does sorting, but no versioning. In a typical workflow, you would gather the files to a temporary location using this tool, then use squirrel-store to permanently store those files (with versioning) to a final destination.

[usage]
%(prog)s <source files or directories> <destination directory> [options]

[options-source]
short_flag = source
long_flag =
action = store
dest =
default =
type = str
metavar =
nargs = +
required = True
description = The source files or directories you wish to store. You may enter as many files or directories as you like. If you include directories, note that any sub-directories within these directories are not included.

[options-destination]
short_flag = destination
long_flag =
action = store
dest = dest
default =
type = str
metavar = destination
nargs = 1
required = True
description = The destination directory where you want the file(s) gathered to. This is a directory where the files will be gathered to. The directory must already exist. If there are files in this directory, they will not be overwritten. Any files being gathered that may clash with already existing files will be renamed so as not to overwrite the existing files.

[options-mapping]
short_flag = -m
long_flag = --mapping
action = store
dest = mapping
default =
type = str
metavar = metadata
nargs = +
required = False
description = An unlimited number of key=value pairs defining where different file types will be sorted to. For example, if you want .tif files to be stored in a sub-directory ./images/source, you would use the following: -m tif=images/source. You may enter as many key=value pairs as you like by using the following format: -m file_type1=relative_path1 file_type2=relative_path2 ... file_typeN=relative_pathN. Note that there are no spaces between the key and the value. If you must have spaces in the file paths, use quotes to enclose the path. The file type should never have spaces. If you skip this option, a built-in default mapping will be used.

[options-udim_pattern]
short_flag = -u
long_flag = --udim-pattern
action = store
dest = udim_pattern
default = <UDIM>
type = str
metavar = pattern
nargs = 1
required = False
description = An optional pattern for how UDIM's are represented in file names. If omitted, defaults to "<UDIM>".

[options-seq_pattern]
short_flag = -s
long_flag = --sequence-pattern
action = store
dest = seq_pattern
default = #
type = str
metavar = pattern
nargs = 1
required = False
description = An optional pattern for how sequence numbers are represented in file names. If omitted, defaults to "#".

[options-seq_delimter]
short_flag = -d
long_flag = --sequence-delimiter
action = store
dest = seq_delim
default = #
type = str
metavar = delimiter
nargs = 1
required = False
description = An optional single character that defines the delimiter on either side of a sequence number. If omitted, defaults to ".".