#! /usr/bin/env python2

"""
License
--------------------------------------------------------------------------------
Squirrel is released under version 3 of the GNU General Public License.

squirrel
Copyright (C) 2019  Bernhard VonZastrow

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

from __future__ import print_function

import inspect
import os
import re
import sys

from bvzlib import filesystem
from bvzlib import options
from bvzlib import resources

from interface import nameinterface
from interface import storeinterface
from librarian import librarian
from shared.squirrelerror import SquirrelError


OPTIONS = [
    "source",
    "tag",
    "repo",
    "metadata",
    "keywords",
    "notes",
    "thumbnails",
    "poster",
    "merge",
    "pins",
    "verify",
    "language",
]


# ------------------------------------------------------------------------------
def validate_options():
    """
    Validates that the options passed are internally consistent,and complete.

    :return: Nothing.
    """

    if len(sys.argv) != 0:
        err = resc.error(100)
        err.msg = err.msg.format()
        print(err.msg)
        sys.exit(100)

    # Source file or directory must exist
    if not os.path.exists(opts.source):
        err = resc.error(101)
        err.msg = err.msg.format(source=opts.source)
        print(err.msg)
        sys.exit(101)

    # Thumbnails must exist
    if opts.thumbnails:
        for thumbnail_file in opts.thumbnails:
            if not os.path.exists(thumbnail_file):
                err = resc.error(104)
                err.msg = err.msg.format(thumbnail_file=thumbnail_file)
                print(err.msg)
                sys.exit(104)

    # Thumbnails must be named correctly
    if opts.thumbnails:
        pattern = opts.name + "\.[0-9]+\..+"
        for thumbnail_file in opts.thumbnails:
            thumbnail_file = os.path.split(thumbnail_file)[1]
            results = re.match(pattern, thumbnail_file)
            if not results:
                err = resc.error(105)
                err.msg = err.msg.format(name=opts.name,
                                         thumbnail_file=thumbnail_file)
                print(err.msg)
                sys.exit(105)

    # Poster frame number only relevant if thumbnails are provided
    if not opts.thumbnails and opts.poster_frame:
        err = resc.error(106)
        err.msg = err.msg.format(frame=str(opts.poster_frame))
        print(err.msg)
        sys.exit(106)

    # Poster frame must exist
    if opts.thumbnails and opts.poster_frame:
        pattern = opts.name + "\." + str(opts.poster_frame) + "\..+"
        found = False
        for thumbnail_file in opts.thumbnails:
            thumbnail_file = os.path.split(thumbnail_file)[1]
            results = re.match(pattern, thumbnail_file)
            if results:
                found = True
                break
        if not found:
            err = resc.error(107)
            err.msg = err.msg.format(frame=str(opts.poster_frame))
            print(err.msg)
            sys.exit(107)


# ==============================================================================
if __name__ == "__main__":

    # Extract the language from the sys.argv if it is there
    language = "english"
    if "-language" in sys.argv:
        idx = sys.argv.index("-language")
        try:
            language = sys.argv[idx]
        except IndexError:
            pass

    module_d = os.path.split(inspect.stack()[0][1])[0]
    resources_d = os.path.join(module_d, "..", "resources")
    resc = resources.Resources(resources_d, "bin_squirrel-publish", language)

    # Create and initialize the options object
    try:
        opts_obj = options.Options(OPTIONS, resc, sys.argv[1:], language)
    except ValueError as error:
        print(error)
        sys.exit()

    opts = opts_obj.opts
    sys.argv = opts_obj.args

    opts.source = opts.source.rstrip("/")

    # If there are thumbnails, get a list of those files from the spec provided.
    if opts.thumbnails:
        opts.thumbnails = filesystem.expand_frame_spec(opts.thumbnails)
    else:
        opts.thumbnails = None

    if opts.repo == "":
        opts.repo = None

    # Convert metadata to a dictionary
    metadata = dict()
    if opts.metadata:
        for item in opts.metadata:
            metadata[item.split("=")[0]] = item.split("=")[1]

    # Validate the inputs
    validate_options()

    try:

        librarian = librarian.Librarian(opts.language)

        if not opts.token:
            file_n = os.path.split(opts.source)[1]
            librarian.validate_name(file_n, opts.repo)
            name_metadata = librarian.extract_metadata_from_name(file_n,
                                                                 opts.repo)
            opts.token = name_metadata[0]

        pub_loc = librarian.get_publish_loc(opts.token, opts.repo)

        librarian.store(
            name=os.path.split(opts.source)[1],
            asset_parent_d=pub_loc,
            src_p=opts.source,
            metadata=metadata,
            keywords=opts.keywords,
            notes=opts.notes,
            thumbnails=opts.thumbnails,
            merge=not opts.nomerge,
            poster_frame=opts.poster_frame,
            pins=opts.pins,
            verify_copy=opts.verify)

    except SquirrelError as e:
        print(e.message)
        sys.exit(e.errno)
