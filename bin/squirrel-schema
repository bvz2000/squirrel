#! /usr/bin/env python2

# TODO: Add scan feature
"""
License
--------------------------------------------------------------------------------
schema is released under version 3 of the GNU General Public License.

schema
Copyright (C) 2019  Bernhard VonZastrow

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

from __future__ import print_function

import inspect
import os
import sys

from bvzlib import options
from bvzlib import resources

from schema import manager

OPTIONS = [
    "list_repos",
    "remove_broken_repos",
    "set_default",
    "add_repository",
    "remove_repository",
    "scan_for_repositories",
    "bless_tree",
    "bless_root",
    "bless_dir",
    "name",
    "language",
]


# ------------------------------------------------------------------------------
def validate_option(path):
    """
    Validates a single option.

    :return: The path we are validating, converted to an absolute path.
    """

    if not os.path.exists(path):
        err_obj = resc.error(101)
        err_obj.msg = err_obj.msg.format(path=path)
        print(err_obj.msg)
        sys.exit(101)
    if opts.name == "":
        opts.name = os.path.split(path.rstrip(os.path.sep))[1]
    if not os.path.isabs(path):
        path = os.path.abspath(path)

    return path


# ------------------------------------------------------------------------------
def validate_options():
    """
    Validates that the options passed are internally consistent,and complete.

    :return: Nothing.
    """

    if len(sys.argv) != 0:
        err_obj = resc.error(100)
        err_obj.msg = err_obj.msg.format()
        print(err_obj.msg)
        sys.exit(100)

    if (not opts.list_repos and
            not opts.remove_broken_repos and
            not opts.set_default_repository and
            not opts.remove_repository and
            not opts.add_repository and
            not opts.bless_tree and
            not opts.bless_root and
            not opts.bless_dir):
        err_obj = resc.error(100)
        err_obj.msg = err_obj.msg.format()
        print(err_obj.msg)
        sys.exit(100)

    # Each of these options is mutually exclusive. So if bless-tree, bless-root
    # and bless-dir all are set, only one will be used (in the order listed).
    # The remaining will be automatically disabled.
    if opts.bless_tree:
        opts.bless_tree = validate_option(opts.bless_tree)
        opts.bless_root = ""
        opts.bless_dir = ""

    if opts.bless_root:
        opts.bless_root = validate_option(opts.bless_root)
        opts.bless_dir = ""

    if opts.bless_dir:
        opts.bless_dir = validate_option(opts.bless_dir)


# ==============================================================================
if __name__ == "__main__":

    # Extract the language from the sys.argv if it is there
    language = "english"
    if "-language" in sys.argv:
        idx = sys.argv.index("-language")
        try:
            language = sys.argv[idx]
        except IndexError:
            pass

    module_d = os.path.split(inspect.stack()[0][1])[0]
    resources_d = os.path.join(module_d, "..", "resources")
    resc = resources.Resources(resources_d, "bin_squirrel-schema", language)

    # Create and initialize the options object
    try:
        opts_obj = options.Options(OPTIONS, resc, sys.argv[1:], language)
    except ValueError as error:
        print(error)
        sys.exit()

    opts = opts_obj.opts
    sys.argv = opts_obj.args

    # Validate the inputs
    validate_options()

    repo_manager_obj = manager.RepoManager(language)

    if opts.list_repos:

        repos = list()
        broken_repos = list()
        default_repo = ""

        name_len = 0
        for repo in repo_manager_obj.repos.keys():
            repos.append(repo)
            name_len = max(len(repo), name_len)

        broken_repos = repo_manager_obj.list_broken_repos()
        for repo in broken_repos:
            name_len = max(len(repo[0]), name_len)

        default_repo = repo_manager_obj.get_default_repo()

        for repo in repo_manager_obj.repos.keys():
            prefix = options.BRIGHT_GREEN + "  VALID:" + options.ENDC
            if repo == default_repo:
                prefix = options.BRIGHT_CYAN + "DEFAULT:" + options.ENDC
            print(prefix,
                  repo.rjust(name_len),
                  "->",
                  repo_manager_obj.repos[repo].repo_root_d)

        for repo in broken_repos:
            print(options.BRIGHT_RED + " BROKEN:" + options.ENDC,
                  repo[0].rjust(name_len),
                  "->",
                  repo[1])

    if opts.remove_broken_repos:
        broken_repos = repo_manager_obj.list_broken_repos()
        for broken_repo in broken_repos:
            repo_manager_obj.remove_repo_from_config(broken_repo[0])

    if opts.set_default_repository:
        try:
            repo_manager_obj.set_default_repo(opts.set_default_repository)
        except ValueError as err:
            print(str(err))
            sys.exit()

    if opts.remove_repository:
        repo_manager_obj.remove_repo_from_config(opts.remove_repository)

    if opts.add_repository:
        opts.add_repository = os.path.abspath(opts.add_repository)
        try:
            repo_manager_obj.add_repo_to_config(opts.add_repository)
        except ValueError as err:
            print(str(err))
            sys.exit()

    if opts.bless_tree:
        try:
            repo_manager_obj = manager.RepoManager(language)
            repo_manager_obj.bless_tree(opts.bless_tree, opts.name)
        except ValueError as e:
            print(str(e))

    if opts.bless_root:
        try:
            repo_manager_obj = manager.RepoManager(language)
            repo_manager_obj.bless_dir(opts.bless_root, True, opts.name)
        except ValueError as e:
            print(str(e))

    if opts.bless_dir:
        try:
            repo_manager_obj = manager.RepoManager(language)
            repo_manager_obj.bless_dir(opts.bless_dir)
        except ValueError as e:
            print(str(e))
