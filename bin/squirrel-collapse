#! /usr/bin/env python2

"""
License
--------------------------------------------------------------------------------
Squirrel is released under version 3 of the GNU General Public License.

squirrel
Copyright (C) 2019  Bernhard VonZastrow

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

from __future__ import print_function

from __future__ import print_function

import inspect
import os
import sys

from bvzlib import options
from bvzlib import resources

from squirrel.librarian import librarian
from squirrel.shared.squirrelerror import SquirrelError

OPTIONS = [
    "asset_name",
    "token",
    "remove_pins",
    "repo",
    "local_mode",
    "language",
]


# ------------------------------------------------------------------------------
def validate_options():
    """
    Validates that the options passed are internally consistent,and complete.

    :return: Nothing.
    """

    pass


# ==============================================================================
if __name__ == "__main__":

    # Extract the language from the sys.argv if it is there
    language = "english"
    if "-language" in sys.argv:
        idx = sys.argv.index("-language")
        try:
            language = sys.argv[idx]
        except IndexError:
            pass

    module_d = os.path.split(inspect.stack()[0][1])[0]
    resources_d = os.path.join(module_d, "..", "resources")
    resc = resources.Resources(resources_d, "bin_squirrel-collapse", language)

    # Create and initialize the options object
    try:
        opts_obj = options.Options(OPTIONS, resc, sys.argv[1:], language)
    except ValueError as error:
        print(error)
        sys.exit()

    opts = opts_obj.opts
    sys.argv = opts_obj.args

    # Validate the inputs
    validate_options()

    try:

        librarian = librarian.Librarian(opts.language)

        if opts.local_mode:

            asset_parent_p = opts.token

        else:

            asset_parent_p = librarian.get_publish_loc(opts.token, opts.repo)

        pins = librarian.get_pins(asset_parent_p,
                                  opts.asset_name,
                                  opts.local_mode)

        if pins and not opts.remove_pins:
            err = resc.error(100)
            err.msg = err.msg.format()
            print(err.msg)
            sys.exit(100)

        msg = resc.message("warning")
        msg = msg.format(asset_name=opts.asset_name)
        result = None
        while not result:
            result = raw_input(msg)
            if result.upper() in ["N", "Q"]:
                sys.exit(0)
            if result.upper() not in ["COLLAPSE"]:
                msg = resc.message("warning_re_enter")
                result = None

        librarian.collapse(asset_parent_p,
                           opts.asset_name,
                           opts.remove_pins,
                           opts.local_mode)

    except SquirrelError as e:
        print(e.message)
        sys.exit(e.errno)
