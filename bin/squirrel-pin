#! /usr/bin/env python2

"""
License
--------------------------------------------------------------------------------
Squirrel is released under version 3 of the GNU General Public License.

squirrel
Copyright (C) 2019  Bernhard VonZastrow

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

from __future__ import print_function

from __future__ import print_function

import inspect
import os
import re
import sys

from bvzlib import options
from bvzlib import resources

from squirrel.librarian import librarian
from squirrel.shared.squirrelerror import SquirrelError

OPTIONS = [
    "asset_name",
    "token",
    "version",
    "pin_name",
    "repo",
    "delete",
    "local_mode",
    "language",
]


# ------------------------------------------------------------------------------
def validate_options():
    """
    Validates that the options passed are internally consistent,and complete.

    :return: Nothing.
    """

    opts.pin_name = opts.pin_name.upper()

    pattern = "^v[0-9][0-9][0-9][0-9]$"
    matched = re.match(pattern, opts.version)
    if not matched:
        error = resc.error(102)
        error.msg = error.msg.format(version=opts.version)
        print(error.msg)
        sys.exit(102)

    if opts.pin_name.upper() == "LATEST":
        error = resc.error(104)
        error.msg = error.msg.format()
        print(error.msg)
        sys.exit(104)


# ==============================================================================
if __name__ == "__main__":

    # Extract the language from the sys.argv if it is there
    language = "english"
    if "-language" in sys.argv:
        idx = sys.argv.index("-language")
        try:
            language = sys.argv[idx]
        except IndexError:
            pass

    module_d = os.path.split(inspect.stack()[0][1])[0]
    resources_d = os.path.join(module_d, "..", "resources")
    resc = resources.Resources(resources_d, "bin_squirrel-pin", language)

    # Create and initialize the options object
    try:
        opts_obj = options.Options(OPTIONS, resc, sys.argv[1:], language)
    except ValueError as e:
        print(e)
        sys.exit()

    opts = opts_obj.opts
    sys.argv = opts_obj.args

    if not opts.repo:
        opts.repo = None

    # Validate the inputs
    validate_options()

    try:

        if opts.local_mode:

            librarian = librarian.Librarian(init_name=False,
                                            init_schema=False,
                                            init_store=True,
                                            language=opts.language)

            asset_parent_p = opts.token

        else:

            librarian = librarian.Librarian(init_name=False,
                                            init_schema=True,
                                            init_store=True,
                                            language=opts.language)

            asset_parent_p = librarian.get_publish_loc(opts.token, opts.repo)

        # Does the version being pinned to exist?
        if not librarian.version_exists(asset_parent_p,
                                        opts.asset_name,
                                        opts.version,
                                        opts.local_mode):
            err = resc.error(103)
            err.msg = err.msg.format(version=opts.version,
                                     asset_path=opts.asset_name)
            print(err.msg)
            sys.exit(103)

        # Get current version of the pin (if it exists)
        ver = librarian.get_pin_version(asset_parent_p,
                                        opts.asset_name,
                                        opts.pin_name,
                                        opts.local_mode)

        if not opts.delete:

            # New pinned version is the same as the old one
            if ver == opts.version:
                sys.exit(0)

            # The pin already exists, double check moving it
            if ver:
                msg = resc.message("pin_exists")
                msg = msg.format(pin=opts.pin_name,
                                 version=ver,
                                 new_ver=opts.version)
                result = None
                while not result:
                    result = raw_input(msg)
                    if result.upper() in ["N", "Q"]:
                        sys.exit(0)
                    if result.upper() not in ["Y", "C"]:
                        msg = resc.message("pin_exists_re_enter")
                        result = None

            librarian.set_pin(asset_parent_p,
                              opts.asset_name,
                              opts.pin_name,
                              opts.version,
                              opts.local_mode)
        else:

            # The version they supplied does not exist.
            if not ver:
                err = resc.error(109)
                err.msg = err.msg.format(pin=opts.pin_name,
                                         asset=opts.asset_name)
                print(err.msg)
                sys.exit(109)

            # The version supplied doesn't match the pin's current version
            if ver != opts.version:
                err = resc.error(110)
                err.msg = err.msg.format(version=opts.version,
                                         pin=opts.pin_name,
                                         actual_ver=ver)
                print(err.msg)
                sys.exit(110)

            msg = resc.message("delete_confirm")
            msg = msg.format(pin=opts.pin_name,
                             version=opts.version,
                             asset_name=opts.asset_name)
            result = None
            while not result:
                result = raw_input(msg)
                if result.upper() in ["N", "Q"]:
                    sys.exit(0)
                if result.upper() not in ["Y", "C", "D"]:
                    msg = resc.message("delete_confirm_re_enter")
                    result = None

            librarian.remove_pin(asset_parent_p,
                                 opts.asset_name,
                                 opts.pin_name,
                                 opts.local_mode)

    except SquirrelError as e:
        print(e.message)
        sys.exit(e.errno)
