#! /usr/bin/env python2

"""
License
--------------------------------------------------------------------------------
Squirrel is released under version 3 of the GNU General Public License.

squirrel
Copyright (C) 2019  Bernhard VonZastrow

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

from __future__ import print_function

from __future__ import print_function

import inspect
import os
import re
import sys

from bvzlib import options
from bvzlib import resources

from store import meta
from store import asset

OPTIONS = [
    "asset_path",
    "version",
    "notes",
    "append",
    "language",
]


# ------------------------------------------------------------------------------
def validate_options():
    """
    Validates that the options passed are internally consistent,and complete.

    :return: Nothing.
    """

    if not os.path.exists(opts.asset_path):
        err = resc.error(100)
        err.msg = err.msg.format(asset_path=opts.asset_path)
        print(err.msg)
        sys.exit(100)

    if not os.path.exists(os.path.join(opts.asset_path, ".asset")):
        err = resc.error(101)
        err.msg = err.msg.format(asset_path=opts.asset_path)
        print(err.msg)
        sys.exit(101)

    pattern = "v[0-9][0-9][0-9][0-9]"
    result = re.match(pattern, opts.version)
    if not result:
        err = resc.error(102)
        err.msg = err.msg.format(version=opts.version)
        print(err.msg)
        sys.exit(102)

    if not os.path.exists(os.path.join(opts.asset_path, opts.version)):
        err = resc.error(103)
        err.msg = err.msg.format(version=opts.version,
                                 asset_path=opts.asset_path)
        print(err.msg)
        sys.exit(103)

    if not opts.notes:
        msg = resc.message("no_notes")
        print(msg)
        sys.exit(0)


# ==============================================================================
if __name__ == "__main__":

    # Extract the language from the sys.argv if it is there
    language = "english"
    if "-language" in sys.argv:
        idx = sys.argv.index("-language")
        try:
            language = sys.argv[idx]
        except IndexError:
            pass

    module_d = os.path.split(inspect.stack()[0][1])[0]
    resources_d = os.path.join(module_d, "..", "resources")
    resc = resources.Resources(resources_d, "bin_squirrel-notes", language)

    # Create and initialize the options object
    try:
        opts_obj = options.Options(OPTIONS, resc, sys.argv[1:], language)
    except ValueError as error:
        print(error)
        sys.exit()

    opts = opts_obj.opts
    sys.argv = opts_obj.args

    # If no version was given, get the highest version
    if not opts.version:
        parent_d, name = os.path.split(opts.asset_path)
        asset_obj = asset.Asset(name, parent_d)
        opts.version = asset_obj.get_highest_ver()

    # Validate the inputs
    validate_options()

    meta_obj = meta.Metadata(opts.asset_path, opts.version, opts.language)
    meta_obj.add_notes(opts.version, opts.notes, opts.append)
