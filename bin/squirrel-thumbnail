#! /usr/bin/env python2

"""
License
--------------------------------------------------------------------------------
Squirrel is released under version 3 of the GNU General Public License.

squirrel
Copyright (C) 2019  Bernhard VonZastrow

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

from __future__ import print_function

import inspect
import os
import re
import sys

from bvzlib import framespec
from bvzlib import options
from bvzlib import resources

from squirrel.librarian import librarian
from squirrel.shared.squirrelerror import SquirrelError

OPTIONS = [
    "asset_name",
    "token",
    "version",
    "thumbnails",
    "merge",
    "poster_frame",
    "repo",
    "local_mode",
    "language",
]


# ------------------------------------------------------------------------------
def validate_options():
    """
    Validates that the options passed are internally consistent,and complete.

    :return: Nothing.
    """

    pattern = "v[0-9][0-9][0-9][0-9]"
    match = re.match(pattern, opts.version)
    if not match:
        error = resc.error(102)
        error.msg = error.msg.format(version=opts.version)
        print(error.msg)
        sys.exit(102)

    if not opts.thumbnails and not opts.poster_frame:
        message = resc.message("nothing_to_do")
        print(message)
        sys.exit(0)

    # Thumbnails must exist
    if opts.thumbnails:
        for thumbnail_file in opts.thumbnails:
            if not os.path.exists(thumbnail_file):
                error = resc.error(104)
                error.msg = error.msg.format(thumbnail_file=thumbnail_file)
                print(error.msg)
                sys.exit(104)

    # Thumbnails must be named correctly
    if opts.thumbnails:
        pattern = opts.asset_name + "\.[0-9]+\..+"
        for thumbnail_file in opts.thumbnails:
            thumbnail_file = os.path.split(thumbnail_file)[1]
            results = re.match(pattern, thumbnail_file)
            if not results:
                error = resc.error(105)
                error.msg = error.msg.format(name=opts.asset_name,
                                             thumbnail_file=thumbnail_file)
                print(error.msg)
                sys.exit(105)

    # Poster frame must exist
    if opts.thumbnails and opts.poster_frame:
        pattern = opts.asset_name + "\." + str(opts.poster_frame) + "\..+"
        found = False
        for thumbnail_file in opts.thumbnails:
            thumbnail_file = os.path.split(thumbnail_file)[1]
            results = re.match(pattern, thumbnail_file)
            if results:
                found = True
                break
        if not found:
            error = resc.error(106)
            error.msg = error.msg.format(frame=str(opts.poster_frame))
            print(error.msg)
            sys.exit(106)


# ==============================================================================
if __name__ == "__main__":

    # Extract the language from the sys.argv if it is there
    language = "english"
    if "-language" in sys.argv:
        idx = sys.argv.index("-language")
        try:
            language = sys.argv[idx]
        except IndexError:
            pass

    module_d = os.path.split(inspect.stack()[0][1])[0]
    resources_d = os.path.join(module_d, "..", "resources")
    resc = resources.Resources(resources_d, "bin_squirrel-thumbnail", language)

    # Create and initialize the options object
    try:
        opts_obj = options.Options(OPTIONS, resc, sys.argv[1:], language)
    except ValueError as e:
        print(e)
        sys.exit()

    opts = opts_obj.opts
    sys.argv = opts_obj.args

    if not opts.repo:
        opts.repo = None

    if opts.thumbnails:

        thumbnails_dir = os.path.split(opts.thumbnails)[0]
        if not os.path.exists(thumbnails_dir):
            err = resc.error(107)
            err.msg = err.msg.format(thumbnail_dir=thumbnails_dir)
            print(err.msg)
            sys.exit(107)
        opts.thumbnails, missing = framespec.expand_files(opts.thumbnails)

    else:

        opts.thumbnails = list()
        missing = list()

    if missing:
        msg = resc.message("missing")
        msg = msg.format(range=", ".join(missing))
        result = None
        while not result:
            result = raw_input(msg)
            if result.upper() in ["N", "Q"]:
                sys.exit(0)
            if result.upper() not in ["Y", "C"]:
                msg = resc.message("missing_re_enter")
                result = None

    try:

        if opts.local_mode:

            librarian = librarian.Librarian(init_name=False,
                                            init_schema=False,
                                            init_store=True,
                                            language=opts.language)

            asset_parent_p = opts.token

        else:

            librarian = librarian.Librarian(init_name=False,
                                            init_schema=True,
                                            init_store=True,
                                            language=opts.language)

            asset_parent_p = librarian.get_publish_loc(opts.token, opts.repo)

        # If no version was given, get the highest version
        if not opts.version:
            opts.version = librarian.get_highest_version(
                asset_parent_p,
                opts.asset_name,
                opts.local_mode)

        if not librarian.version_exists(asset_parent_p,
                                        opts.asset_name,
                                        opts.version,
                                        opts.local_mode):
            err = resc.error(103)
            err.msg = err.msg.format(version=opts.version,
                                     asset_path=opts.asset_name)
            print(err.msg)
            sys.exit(103)

        validate_options()

        if opts.thumbnails:

            if opts.nomerge:
                librarian.delete_thumbnails(asset_parent_p,
                                            opts.asset_name,
                                            opts.version,
                                            opts.local_mode)

            librarian.add_thumbnails(asset_parent_p,
                                     opts.asset_name,
                                     opts.version,
                                     opts.thumbnails,
                                     opts.poster_frame,
                                     opts.local_mode)

        if not opts.thumbnails and opts.poster_frame:
            librarian.set_poster_frame(asset_parent_p,
                                       opts.asset_name,
                                       opts.version,
                                       opts.poster_frame,
                                       opts.local_mode)

    except SquirrelError as e:
        print(e.message)
        sys.exit(e.errno)
