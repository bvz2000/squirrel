#! /usr/bin/env python2

"""
License
--------------------------------------------------------------------------------
Squirrel is released under version 3 of the GNU General Public License.

squirrel
Copyright (C) 2019  Bernhard VonZastrow

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

from __future__ import print_function

import inspect
import os
import sys

from bvzlib import options
from bvzlib import resources

from squirrel.gather import gather
from squirrel.librarian import librarian
from squirrel.shared.squirrelerror import SquirrelError


OPTIONS = [
    "source",
    "destination",
    "mapping",
    "udim_identifier",
    "loose_udim_format",
    "padding",
    "match_hash_length",
    "ignore_missing",
    "skip_published",
    "repo",
]


# ------------------------------------------------------------------------------
def validate_options():
    """
    Validates that the options passed are internally consistent,and complete.

    :return: Nothing.
    """

    if len(sys.argv) != 0:
        err = resc.error(100)
        err.msg = err.msg.format()
        print(err.msg)
        sys.exit(100)

    # Dest directory must exist
    if not os.path.exists(opts.destination):
        err = resc.error(102)
        err.msg = err.msg.format(path=opts.destination)
        print(err.msg)
        sys.exit(102)

    # Dest directory must be a directory
    if not os.path.isdir(opts.destination):
        err = resc.error(103)
        err.msg = err.msg.format(path=opts.destination)
        print(err.msg)
        sys.exit(103)


# ==============================================================================
if __name__ == "__main__":

    # Extract the language from the sys.argv if it is there
    language = "english"
    if "-language" in sys.argv:
        idx = sys.argv.index("-language")
        try:
            language = sys.argv[idx]
        except IndexError:
            pass

    module_d = os.path.split(inspect.stack()[0][1])[0]
    resources_d = os.path.join(module_d, "..", "resources")
    resc = resources.Resources(resources_d, "bin_squirrel-gather", language)

    # Create and initialize the options object
    try:
        opts_obj = options.Options(OPTIONS, resc, sys.argv[1:], language)
    except ValueError as error:
        print(error)
        sys.exit()

    opts = opts_obj.opts
    sys.argv = opts_obj.args

    if opts.padding == "":
        opts.padding = None

    if opts.mapping:
        mapping = dict()
        for item_map in opts.mapping:
            key, value = item_map.split("=")
            mapping[key.strip()] = value.strip()
    else:
        mapping = None

    files = list()
    for source_p in opts.source:
        if not os.path.isdir(os.path.abspath(source_p)):
            files.append(os.path.abspath(source_p))
    opts.source = files

    # Validate the inputs
    validate_options()

    try:

        # Gather the sources
        gather_obj = gather.Gather(
            files=opts.source,
            dest=opts.destination,
            mapping=mapping,
            padding=opts.padding,
            udim_identifier=opts.udim_identifier,
            strict_udim_format=not opts.loose_udim_format,
            match_hash_length=opts.match_hash_length)

        gather_obj.remap_files()

        if gather_obj.has_missing() and not opts.ignore_missing:
            error = resc.error(105)
            error.msg = error.msg.format()
            print(error.msg)
            sys.exit(105)

        if not gather_obj.has_files_to_copy():
            error = resc.error(106)
            error.msg = error.msg.format()
            print(error.msg)
            sys.exit(106)

        if opts.skip_published:

            if not opts.repo:
                repo_names = None
                check_all_repos = True
            else:
                repo_names = opts.repo
                check_all_repos = False

            librarian = librarian.Librarian()

            files_to_cull = list()
            for source_p in gather_obj.remapped:
                if librarian.file_is_within_repo(source_p,
                                                 repo_names,
                                                 check_all_repos):
                    files_to_cull.append(source_p)

            for file_to_cull in files_to_cull:
                gather_obj.cull_file(file_to_cull)

        if len(gather_obj.remapped) > 0:
            msg = resc.message("copy_header")
            print(msg)
            gather_obj.copy_files(verbose=True)
        else:
            msg = resc.message("nothing_to_copy")
            print(msg)

    except SquirrelError as e:
        print(e.message)
        sys.exit(e.errno)
