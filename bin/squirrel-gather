#! /usr/bin/env python2

"""
License
--------------------------------------------------------------------------------
Squirrel is released under version 3 of the GNU General Public License.

squirrel
Copyright (C) 2019  Bernhard VonZastrow

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

from __future__ import print_function

import inspect
import os
import sys

from bvzlib import filesystem
from bvzlib import options
from bvzlib import resources

from fe.gather import gather

OPTIONS = [
    "source",
    "destination",
    "mapping",
    "udim_pattern",
    "seq_pattern",
    "seq_delimter",
]


# ------------------------------------------------------------------------------
def validate_options():
    """
    Validates that the options passed are internally consistent,and complete.

    :return: Nothing.
    """

    if len(sys.argv) != 0:
        err = resc.error(100)
        err.msg = err.msg.format()
        print(err.msg)
        sys.exit(100)

    # Source file or directory must exist
    for item in opts.source:
        files = list()
        if not os.path.exists(item):
            files = filesystem.expand_files(item,
                                            udim_string=opts.udim_pattern,
                                            seq_string=opts.seq_pattern,
                                            seq_delim=opts.seq_delim)
        if not files:
            err = resc.error(101)
            err.msg = err.msg.format(path=item)
            print(err.msg)
            sys.exit(101)

    # Dest directory must exist
    if not os.path.exists(opts.destination):
        err = resc.error(102)
        err.msg = err.msg.format(path=opts.destination)
        print(err.msg)
        sys.exit(102)

    # Dest directory must be a directory
    if not os.path.isdir(opts.destination):
        err = resc.error(103)
        err.msg = err.msg.format(path=opts.destination)
        print(err.msg)
        sys.exit(103)


# ==============================================================================
if __name__ == "__main__":

    # Extract the language from the sys.argv if it is there
    language = "english"
    if "-language" in sys.argv:
        idx = sys.argv.index("-language")
        try:
            language = sys.argv[idx]
        except IndexError:
            pass

    module_d = os.path.split(inspect.stack()[0][1])[0]
    resources_d = os.path.join(module_d, "..", "resources")
    resc = resources.Resources(resources_d, "bin_squirrel-gather", language)

    # Create and initialize the options object
    try:
        opts_obj = options.Options(OPTIONS, resc, sys.argv[1:], language)
    except ValueError as error:
        print(error)
        sys.exit()

    opts = opts_obj.opts
    sys.argv = opts_obj.args

    # Validate the inputs
    validate_options()

    # Gather each of the sources
    for source in opts.source:

        if os.path.isdir(source):
            sources = [f for f in os.listdir(source) if not os.path.isdir(f)]
            for i in range(len(sources)):
                sources[i] = os.path.join(source, sources[i])
        else:
            sources = [source]

        gather_obj = gather.Gather(files=sources,
                                   dest=opts.destination,
                                   mapping=None)

        gather_obj.gather_files()
