#! /usr/bin/env python3

from argparse import ArgumentParser, RawTextHelpFormatter
from datetime import datetime
import getpass
import inspect
import os.path
import re
import sys
import textwrap as textwrap

from squirrel.repo.repomanager import RepoManager
from bvzlocalizationerror import LocalizationError
from bvzlocalization import LocalizedResource
from bvzframespec import Framespec
from squirrel.shared.squirrelerror import SquirrelError
from squirrel.shared import setupconfig
from squirrel.shared import constants

# TODO:
#   -    Add verification to any delete commands (as a separate function)
#   -    Double check the uri requirements (repo_required
#                                           path_required
#                                           name_required
#                                           name_must_exist) on each of the subtasks
#   -    Double check the help strings to make sure they correctly reflect these requirements
#   -    Check to see if we can make versions optional on as many subtasks as possible
#   -    Check to see if we can make multiple URI's a thing so that we can affect multiple assets at once
#   -    Check to see if we can add a wildcard at the end of an asset name in a URI and then disambiguate it


# ======================================================================================================================
class PreserveWhiteSpaceWrapRawTextHelpFormatter(RawTextHelpFormatter):

    def _split_lines(self, text, width):
        text_rows = list(text.splitlines())  # List() needed to shut pycharm up.
        for idx, line in enumerate(text_rows):
            search = re.search(r'\s*[0-9\-]{0,}\.?\s*', line)
            if line.strip() is "":
                text_rows[idx] = " "
            elif search:
                lines = [x for i, x in enumerate(textwrap.wrap(line, width))]
                text_rows[idx] = lines

        return [item for sublist in text_rows for item in sublist]


# ----------------------------------------------------------------------------------------------------------------------
def get_language():
    """
    Looks to see if the -l or --language flags are included in the sys.argv. We do this prior to using the argparse
    functionality because the result of this will control how the argparse behaves.

    :return:
            The language string if the user provided it. If they did not, returns "english"
    """

    language = "english"

    language_index = None
    if "-l" in sys.argv:
        language_index = sys.argv.index("-l")
    if "--language" in sys.argv:
        language_index = sys.argv.index("--language")
    if language_index is not None:
        language = sys.argv[language_index + 1]

    return language


# ----------------------------------------------------------------------------------------------------------------------
def create_localization_object(language):
    """
    Create a localization object.

    :param language:
            The language to use for this resource.

    :return:
            A localization object.
    """

    module_d = os.path.split(inspect.stack()[0][1])[0]
    resources_d = os.path.abspath(os.path.join(module_d, "..", "resources"))
    try:
        return LocalizedResource(resources_d, "squirrel", language)
    except LocalizationError as err:
        print(err.message)
        sys.exit(err.code)


# ----------------------------------------------------------------------------------------------------------------------
def create_config_object(language):
    """
    Create a config object.

    :param language:
            The language to use for this resource.

    :return:
            A localization object.
    """

    module_d = os.path.split(inspect.stack()[0][1])[0]
    resources_d = os.path.join(module_d, "..", "resources")
    try:
        return LocalizedResource(resources_d, "squirrel", language)
    except LocalizationError as err:
        print(err.message)
        sys.exit(err.code)


# ----------------------------------------------------------------------------------------------------------------------
def initial_parser_setup(localization_obj):
    """
    Sets up the top-level arguments parser.

    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language.

    :return:
            The parsed args.
    """

    parser = ArgumentParser(formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter)

    description = "\n".join(textwrap.wrap(localization_obj.get_msg("initial_parser_subtask_helpstr"), 70))
    sub_parser = parser.add_subparsers(title="sub-tasks",
                                       metavar="sub-task",
                                       dest="sub_task",
                                       required=True,
                                       description=description)

    # make-repo -------------------------------------
    help_str = localization_obj.get_msg("make_repo_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="make-repo",
                                           aliases=['mr'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_make_repo_parser(sub_parser=sub_parser_obj,
                           localization_obj=localization_obj)

    # add-repo -------------------------------------
    help_str = localization_obj.get_msg("add_repo_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="add-repo",
                                           aliases=['ar'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_add_repo_parser(sub_parser=sub_parser_obj,
                          localization_obj=localization_obj)

    # remove-repo -------------------------------------
    help_str = localization_obj.get_msg("remove_repo_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="remove-repo",
                                           aliases=['remr'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_remove_repo_parser(sub_parser=sub_parser_obj,
                             localization_obj=localization_obj)

    # rebuild-repo -------------------------------------
    help_str = localization_obj.get_msg("rebuild_repo_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="rebuild-repo",
                                           aliases=['rr'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_rebuild_repo_parser(sub_parser=sub_parser_obj,
                              localization_obj=localization_obj)

    # list-repos -------------------------------------
    help_str = localization_obj.get_msg("list_repos_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="list-repos",
                                           aliases=['lr'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_list_repos_parser(sub_parser=sub_parser_obj,
                            localization_obj=localization_obj)

    # list-missing-repos -------------------------------------
    help_str = localization_obj.get_msg("list_missing_repos_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="list-missing_repos",
                                           aliases=['lmr'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_list_missing_repos_parser(sub_parser=sub_parser_obj,
                                    localization_obj=localization_obj)

    # remove-missing-repos -------------------------------------
    help_str = localization_obj.get_msg("remove_missing_repos_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="remove-missing_repos",
                                           aliases=['rmr'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_remove_missing_repos_parser(sub_parser=sub_parser_obj,
                                      localization_obj=localization_obj)

    # list-default-repo -------------------------------------
    help_str = localization_obj.get_msg("list_default_repo_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="list-default-repo",
                                           aliases=['ldr'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_list_default_repo_parser(sub_parser=sub_parser_obj,
                                   localization_obj=localization_obj)

    # set-default-repo -------------------------------------
    help_str = localization_obj.get_msg("set_default_repo_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="set-default-repo",
                                           aliases=['sdr'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_set_default_repo_parser(sub_parser=sub_parser_obj,
                                  localization_obj=localization_obj)

    # update-repo-caches -------------------------------------
    help_str = localization_obj.get_msg("update_repo_caches_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="update-repo-caches",
                                           aliases=['urc'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_update_repo_caches_parser(sub_parser=sub_parser_obj,
                                    localization_obj=localization_obj)

    # list-cache-path -------------------------------------
    help_str = localization_obj.get_msg("list_cache_path_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="list-cache-path",
                                           aliases=['lcp'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_list_cache_path_parser(sub_parser=sub_parser_obj,
                                 localization_obj=localization_obj)

    # list-assets -------------------------------------
    help_str = localization_obj.get_msg("list_assets_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="list-assets",
                                           aliases=['la'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_list_assets_parser(sub_parser=sub_parser_obj,
                             localization_obj=localization_obj)

    # list-keywords -------------------------------------
    help_str = localization_obj.get_msg("list_keywords_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="list-keywords",
                                           aliases=['lk'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_list_keywords_parser(sub_parser=sub_parser_obj,
                               localization_obj=localization_obj)

    # add-keywords -------------------------------------
    help_str = localization_obj.get_msg("add_keywords_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="add-keywords",
                                           aliases=['ak'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_add_keywords_parser(sub_parser=sub_parser_obj,
                              localization_obj=localization_obj)

    # delete-keywords -------------------------------------
    help_str = localization_obj.get_msg("delete_keywords_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="delete-keywords",
                                           aliases=['dk'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_delete_keywords_parser(sub_parser=sub_parser_obj,
                                 localization_obj=localization_obj)

    # delete-all-keywords -------------------------------------
    help_str = localization_obj.get_msg("delete_all_keywords_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="delete-all-keywords",
                                           aliases=['dak'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_delete_all_keywords_parser(sub_parser=sub_parser_obj,
                                     localization_obj=localization_obj)

    # list-metadata -------------------------------------
    help_str = localization_obj.get_msg("list_metadata_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="list-metadata",
                                           aliases=['lm'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_list_metadata_parser(sub_parser=sub_parser_obj,
                               localization_obj=localization_obj)

    # add-metadata -------------------------------------
    help_str = localization_obj.get_msg("add_metadata_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="add-metadata",
                                           aliases=['am'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_add_metadata_parser(sub_parser=sub_parser_obj,
                              localization_obj=localization_obj)

    # delete-metadata -------------------------------------
    help_str = localization_obj.get_msg("delete_metadata_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="delete-metadata",
                                           aliases=['dm'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_delete_metadata_parser(sub_parser=sub_parser_obj,
                                 localization_obj=localization_obj)

    # delete-all-metadata -------------------------------------
    help_str = localization_obj.get_msg("delete_all_metadata_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="delete-all-metadata",
                                           aliases=['dam'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_delete_all_metadata_parser(sub_parser=sub_parser_obj,
                                     localization_obj=localization_obj)

    # list-version-notes -------------------------------------
    help_str = localization_obj.get_msg("list_version_notes_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="list-version-notes",
                                           aliases=['lvn'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_list_version_notes_parser(sub_parser=sub_parser_obj,
                                    localization_obj=localization_obj)

    # add-version-notes -------------------------------------
    help_str = localization_obj.get_msg("add_version_notes_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="add-version-notes",
                                           aliases=['avn'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_add_version_notes_parser(sub_parser=sub_parser_obj,
                                   localization_obj=localization_obj)

    # delete-version-notes -------------------------------------
    help_str = localization_obj.get_msg("delete_version_notes_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="delete-version-notes",
                                           aliases=['dvn'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_delete_version_notes_parser(sub_parser=sub_parser_obj,
                                      localization_obj=localization_obj)

    # list-version-notes -------------------------------------
    help_str = localization_obj.get_msg("list_asset_notes_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="list-asset-notes",
                                           aliases=['lan'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_list_asset_notes_parser(sub_parser=sub_parser_obj,
                                  localization_obj=localization_obj)

    # add-version-notes -------------------------------------
    help_str = localization_obj.get_msg("add_asset_notes_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="add-asset-notes",
                                           aliases=['aan'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_add_asset_notes_parser(sub_parser=sub_parser_obj,
                                 localization_obj=localization_obj)

    # delete-version-notes -------------------------------------
    help_str = localization_obj.get_msg("delete_asset_notes_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="delete-asset-notes",
                                           aliases=['dan'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_delete_asset_notes_parser(sub_parser=sub_parser_obj,
                                    localization_obj=localization_obj)

    # list-thumbnails -------------------------------------
    help_str = localization_obj.get_msg("list_thumbnails_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="list-thumbnails",
                                           aliases=['lt'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_list_thumbnails_parser(sub_parser=sub_parser_obj,
                                 localization_obj=localization_obj)

    # add-thumbnails -----------------------------------------
    help_str = localization_obj.get_msg("add_thumbnails_help")
    sub_parser_obj = sub_parser.add_parser(name="add-thumbnails",
                                           aliases=['at'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_add_thumbnails_parser(sub_parser=sub_parser_obj,
                                localization_obj=localization_obj)

    # delete-thumbnails -----------------------------------------
    help_str = localization_obj.get_msg("delete_thumbnails_help")
    sub_parser_obj = sub_parser.add_parser(name="delete-thumbnails",
                                           aliases=['dt'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_delete_thumbnails_parser(sub_parser=sub_parser_obj,
                                   localization_obj=localization_obj)

    # set-pin -----------------------------------------
    help_str = localization_obj.get_msg("set_pin_help")
    sub_parser_obj = sub_parser.add_parser(name="set-pin",
                                           aliases=['sp'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_set_pin_parser(sub_parser=sub_parser_obj,
                         localization_obj=localization_obj)

    # delete-pin -----------------------------------------
    help_str = localization_obj.get_msg("delete_pin_help")
    sub_parser_obj = sub_parser.add_parser(name="delete-pin",
                                           aliases=['dp'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_delete_pin_parser(sub_parser=sub_parser_obj,
                            localization_obj=localization_obj)

    # lock-pin -----------------------------------------
    help_str = localization_obj.get_msg("lock_pin_help")
    sub_parser_obj = sub_parser.add_parser(name="lock-pin",
                                           aliases=['lp'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_lock_pin_parser(sub_parser=sub_parser_obj,
                          localization_obj=localization_obj)

    # unlock-pin -----------------------------------------
    help_str = localization_obj.get_msg("unlock_pin_help")
    sub_parser_obj = sub_parser.add_parser(name="unlock-pin",
                                           aliases=['up'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_unlock_pin_parser(sub_parser=sub_parser_obj,
                            localization_obj=localization_obj)

    # publish -----------------------------------------
    help_str = localization_obj.get_msg("publish_help")
    sub_parser_obj = sub_parser.add_parser(name="publish",
                                           aliases=['p'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_publish_parser(sub_parser=sub_parser_obj,
                         localization_obj=localization_obj)

    # delete-version -----------------------------------------
    help_str = localization_obj.get_msg("delete_version_help")
    sub_parser_obj = sub_parser.add_parser(name="delete-version",
                                           aliases=['dv'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_delete_version_parser(sub_parser=sub_parser_obj,
                                localization_obj=localization_obj)

    # collapse -----------------------------------------
    help_str = localization_obj.get_msg("collapse_help")
    sub_parser_obj = sub_parser.add_parser(name="collapse",
                                           aliases=['c'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_collapse_parser(sub_parser=sub_parser_obj,
                          localization_obj=localization_obj)

    # display-log -----------------------------------------
    help_str = localization_obj.get_msg("display_log_subtask_help")
    sub_parser_obj = sub_parser.add_parser(name="display-log",
                                           aliases=['dl'],
                                           formatter_class=PreserveWhiteSpaceWrapRawTextHelpFormatter,
                                           help=help_str)
    setup_display_log_parser(sub_parser=sub_parser_obj,
                             localization_obj=localization_obj)

    help_str = localization_obj.get_msg("postfix_language_helpstr")
    parser.add_argument("-l",
                        "--language",
                        type=str,
                        help=help_str)

    args = parser.parse_args()

    return args


# ----------------------------------------------------------------------------------------------------------------------
def setup_shared_asset_name_option(sub_parser,
                                   localization_obj):
    """
    Adds the --asset-name (-a) option and the --uri (-u) option to the sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add the --asset-name and --uri-path options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("prefix_asset_name_required_helpstr")
    sub_parser.add_argument("-a",
                            "--asset-name",
                            type=str,
                            required=False,
                            default=None,
                            help=help_str)

    help_str = localization_obj.get_msg("prefix_uri_optional_helpstr")
    sub_parser.add_argument("-u",
                            "--uri",
                            type=str,
                            required=False,
                            default=None,
                            help=help_str)


# ----------------------------------------------------------------------------------------------------------------------
def setup_shared_uri_option(sub_parser,
                            localization_obj):
    """
    Adds the require the --uri (-u) option to the sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add the --asset-name and --uri-path options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("prefix_uri_required_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            type=str,
                            required=False,
                            default=None,
                            help=help_str)


# ----------------------------------------------------------------------------------------------------------------------
def setup_shared_sub_parser_postfix(sub_parser,
                                    localization_obj):
    """
    Sets up the shared arguments sub-parser (i.e. args that every sub-parser uses). These are the args that come at the
    end of the list of options (postfix). There is a separate function for args that come at the beginning of the list.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("postfix_repo_list_path_helpstr")
    help_str = help_str.format(env=constants.REPO_LIST_PATH_ENV_VAR)
    sub_parser.add_argument("-R",
                            metavar="repo-list-path",
                            dest="repo_list_path",
                            type=str,
                            help=help_str)

    help_str = localization_obj.get_msg("postfix_config_path_helpstr")
    help_str = help_str.format(env=constants.CONFIG_PATH_ENV_VAR)
    sub_parser.add_argument("-c",
                            metavar="config-file",
                            dest="config_path",
                            type=str,
                            help=help_str)

    help_str = localization_obj.get_msg("postfix_language_helpstr")
    sub_parser.add_argument("-l",
                            action="store_true",
                            help=help_str)


# ----------------------------------------------------------------------------------------------------------------------
def setup_make_repo_parser(sub_parser,
                           localization_obj):
    """
    Sets up the make repo sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("make_repo_directory_required_helpstr")
    sub_parser.add_argument("-d",
                            "--directory",
                            type=str,
                            required=True,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_add_repo_parser(sub_parser,
                          localization_obj):
    """
    Sets up the add repo sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("add_repo_directory_required_helpstr")
    sub_parser.add_argument("-d",
                            "--directory",
                            type=str,
                            required=True,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_remove_repo_parser(sub_parser,
                             localization_obj):
    """
    Sets up the remove repo sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("remove_repo_name_required_helpstr")
    sub_parser.add_argument("-r",
                            "--repo-name",
                            type=str,
                            required=True,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_rebuild_repo_parser(sub_parser,
                              localization_obj):
    """
    Sets up the rebuild repo sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("rebuild_repo_path_required_helpstr")
    sub_parser.add_argument("-p",
                            "--repo-path",
                            type=str,
                            required=True,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_list_repos_parser(sub_parser,
                            localization_obj):
    """
    Sets up the list repos sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("list_repos_include_paths_optional_helpstr")
    sub_parser.add_argument("-i",
                            "--include-paths",
                            action="store_true",
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_list_missing_repos_parser(sub_parser,
                                    localization_obj):
    """
    Sets up the list repos sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("list_missing_repos_include_paths_optional_helpstr")
    sub_parser.add_argument("-i",
                            "--include-paths",
                            action="store_true",
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_remove_missing_repos_parser(sub_parser,
                                      localization_obj):
    """
    Sets up the list repos sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_list_default_repo_parser(sub_parser,
                                   localization_obj):
    """
    Sets up the list default repo sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("list_default_repo_include_paths_optional_helpstr")
    sub_parser.add_argument("-i",
                            "--include-path",
                            action="store_true",
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_set_default_repo_parser(sub_parser,
                                  localization_obj):
    """
    Sets up the set default repo sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("set_default_repo_name_required_helpstr")
    sub_parser.add_argument("-r",
                            "--repo",
                            type=str,
                            required=True,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_update_repo_caches_parser(sub_parser,
                                    localization_obj):
    """
    Sets up the update repo caches sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("update_repo_caches_optional_uri")
    sub_parser.add_argument("-u",
                            dest="uri",
                            default=None,
                            type=str,
                            required=False,
                            help=help_str)

    help_str = localization_obj.get_msg("update_repo_caches_optional_all")
    sub_parser.add_argument("-a",
                            "--all-repos",
                            action="store_true",
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_list_cache_path_parser(sub_parser,
                                 localization_obj):
    """
    Sets up the list cache path sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("postfix_config_path_helpstr")
    help_str = help_str.format(env=constants.CONFIG_PATH_ENV_VAR)
    sub_parser.add_argument("-c",
                            metavar="config-file",
                            dest="config_path",
                            type=str,
                            help=help_str)


# ----------------------------------------------------------------------------------------------------------------------
def setup_list_assets_parser(sub_parser,
                             localization_obj):
    """
    Sets up the list assets sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("list_assets_uri_path_optional_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            nargs="+",
                            type=str,
                            required=False,
                            default=None,
                            help=help_str)

    help_str = localization_obj.get_msg("list_assets_keywords_optional_helpstr")
    sub_parser.add_argument("-k",
                            metavar="keywords",
                            dest="keywords",
                            nargs="+",
                            type=str,
                            required=False,
                            default=None,
                            help=help_str)

    help_str = localization_obj.get_msg("list_assets_metadata_keys_optional_helpstr")
    sub_parser.add_argument("-m",
                            metavar="metadata",
                            dest="metadata_keys",
                            nargs="+",
                            type=str,
                            required=False,
                            default=None,
                            help=help_str)

    help_str = localization_obj.get_msg("list_assets_metadata_keys_and_values_optional_helpstr")
    sub_parser.add_argument("-M",
                            metavar="metadata-keys-and-values",
                            dest="metadata_keys_and_values",
                            nargs="+",
                            type=str,
                            required=False,
                            default=None,
                            help=help_str)

    help_str = localization_obj.get_msg("list_assets_keyword_and_optional_helpstr")
    sub_parser.add_argument("-a",
                            dest="keywords_and",
                            action="store_true",
                            help=help_str)

    help_str = localization_obj.get_msg("list_assets_metadata_and_optional_helpstr")
    sub_parser.add_argument("-A",
                            dest="metadata_and",
                            action="store_true",
                            help=help_str)

    help_str = localization_obj.get_msg("list_assets_formatting_optional_helpstr")
    sub_parser.add_argument("-f",
                            metavar="formatting-string",
                            dest="format",
                            type=str,
                            required=False,
                            default=None,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_add_keywords_parser(sub_parser,
                              localization_obj):
    """
    Sets up the add keywords sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("add_keywords_uri_required_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            nargs="+",
                            type=str,
                            required=False,
                            default=None,
                            help=help_str)

    help_str = localization_obj.get_msg("add_keywords_keywords_required_helpstr")
    sub_parser.add_argument("-k",
                            metavar="keywords",
                            dest="keywords",
                            nargs="+",
                            type=str,
                            required=True,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_delete_keywords_parser(sub_parser,
                                 localization_obj):
    """
    Sets up the delete keywords sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("delete_keywords_uri_required_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            nargs="+",
                            type=str,
                            required=True,
                            default=None,
                            help=help_str)

    help_str = localization_obj.get_msg("delete_keywords_keywords_required_helpstr")
    sub_parser.add_argument("-k",
                            metavar="keywords",
                            dest="keywords",
                            nargs="+",
                            type=str,
                            required=False,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_delete_all_keywords_parser(sub_parser,
                                     localization_obj):
    """
    Sets up the delete keywords sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("delete_all_keywords_uri_required_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            nargs="+",
                            type=str,
                            required=True,
                            default=None,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_list_keywords_parser(sub_parser,
                               localization_obj):
    """
    Sets up the list keywords sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("list_keywords_uri_paths_optional_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            nargs="+",
                            type=str,
                            required=False,
                            default=None,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_add_metadata_parser(sub_parser,
                              localization_obj):
    """
    Sets up the add metadata sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("add_metadata_uri_required_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            nargs="+",
                            type=str,
                            required=False,
                            default=None,
                            help=help_str)

    help_str = localization_obj.get_msg("add_metadata_metadata_required_helpstr")
    sub_parser.add_argument("-m",
                            metavar="metadata",
                            dest="metadata",
                            nargs="+",
                            type=str,
                            required=False,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_delete_metadata_parser(sub_parser,
                                 localization_obj):
    """
    Sets up the delete metadata sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("delete_metadata_uri_required_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            nargs="+",
                            type=str,
                            required=False,
                            default=None,
                            help=help_str)

    help_str = localization_obj.get_msg("delete_metadata_metadata_required_helpstr")
    sub_parser.add_argument("-m",
                            metavar="metadata",
                            dest="metadata",
                            nargs="+",
                            type=str,
                            required=False,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_delete_all_metadata_parser(sub_parser,
                                     localization_obj):
    """
    Sets up the delete metadata sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("delete_all_metadata_uri_required_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            nargs="+",
                            type=str,
                            required=False,
                            default=None,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_list_metadata_parser(sub_parser,
                               localization_obj):
    """
    Sets up the list metadata sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("list_metadata_uri_paths_optional_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            nargs="+",
                            type=str,
                            required=False,
                            default=None,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_add_version_notes_parser(sub_parser,
                                   localization_obj):
    """
    Sets up the add version notes sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("add_version_notes_uri_required_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            type=str,
                            required=True,
                            default=None,
                            help=help_str)

    help_str = localization_obj.get_msg("add_version_notes_notes_required_helpstr")
    sub_parser.add_argument("-n",
                            metavar="notes",
                            dest="notes",
                            nargs="+",
                            type=str,
                            required=False,
                            help=help_str)

    help_str = localization_obj.get_msg("add_version_notes_version_optional_helpstr")
    sub_parser.add_argument("-v",
                            metavar="version",
                            dest="version",
                            type=int,
                            required=False,
                            help=help_str)

    help_str = localization_obj.get_msg("add_version_notes_overwrite_optional_helpstr")
    sub_parser.add_argument("-o",
                            "--overwrite",
                            action="store_true",
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_delete_version_notes_parser(sub_parser,
                                      localization_obj):
    """
    Sets up the delete version notes sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("delete_version_notes_uri_required_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            type=str,
                            required=True,
                            default=None,
                            help=help_str)

    help_str = localization_obj.get_msg("delete_version_notes_version_optional_helpstr")
    sub_parser.add_argument("-v",
                            "--version",
                            type=int,
                            required=False,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_list_version_notes_parser(sub_parser,
                                    localization_obj):
    """
    Sets up the list version notes sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("list_version_notes_uri_required_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            type=str,
                            required=True,
                            default=None,
                            help=help_str)

    help_str = localization_obj.get_msg("list_version_notes_version_optional_helpstr")
    sub_parser.add_argument("-v",
                            metavar="version",
                            dest="version",
                            type=int,
                            required=False,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_add_asset_notes_parser(sub_parser,
                                 localization_obj):
    """
    Sets up the add asset notes sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("add_asset_notes_uri_required_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            type=str,
                            required=True,
                            default=None,
                            help=help_str)

    help_str = localization_obj.get_msg("add_asset_notes_notes_required_helpstr")
    sub_parser.add_argument("-n",
                            metavar="notes",
                            dest="notes",
                            nargs="+",
                            type=str,
                            required=False,
                            help=help_str)

    help_str = localization_obj.get_msg("add_asset_notes_overwrite_optional_helpstr")
    sub_parser.add_argument("-o",
                            "--overwrite",
                            action="store_true",
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_delete_asset_notes_parser(sub_parser,
                                    localization_obj):
    """
    Sets up the delete asset notes sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("delete_asset_notes_uri_required_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            type=str,
                            required=True,
                            default=None,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_list_asset_notes_parser(sub_parser,
                                  localization_obj):
    """
    Sets up the list asset notes sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("list_asset_notes_uri_required_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            type=str,
                            required=True,
                            default=None,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_list_thumbnails_parser(sub_parser,
                                 localization_obj):
    """
    Sets up the list thumbnails sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("list_thumbnails_uri_required_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            type=str,
                            required=True,
                            default=None,
                            help=help_str)

    help_str = localization_obj.get_msg("list_thumbnails_version_optional_helpstr")
    sub_parser.add_argument("-v",
                            "--version",
                            type=int,
                            default=None,
                            required=False,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_add_thumbnails_parser(sub_parser,
                                localization_obj):
    """
    Sets up the add thumbnails sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("add_thumbnails_notes_uri_required_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            type=str,
                            required=True,
                            default=None,
                            help=help_str)

    help_str = localization_obj.get_msg("add_thumbnails_thumbnail_files_required_helpstr")
    sub_parser.add_argument("-t",
                            metavar="thumbnails",
                            dest="thumbnails_p",
                            nargs="+",
                            type=str,
                            required=True,
                            help=help_str)

    help_str = localization_obj.get_msg("add_thumbnails_poster_frame_num_optional_helpstr")
    sub_parser.add_argument("-p",
                            metavar="poster-frame-num",
                            dest="poster_frame_num",
                            type=int,
                            required=False,
                            help=help_str)

    help_str = localization_obj.get_msg("add_thumbnails_version_optional_helpstr")
    sub_parser.add_argument("-v",
                            "--version",
                            type=int,
                            required=False,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_delete_thumbnails_parser(sub_parser,
                                   localization_obj):
    """
    Sets up the delete thumbnails sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("delete_thumbnails_notes_uri_required_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            type=str,
                            required=True,
                            default=None,
                            help=help_str)

    help_str = localization_obj.get_msg("add_thumbnails_version_required_helpstr")
    help_str = help_str.format(hashes="#"*constants.VERSION_NUM_DIGITS)
    sub_parser.add_argument("-v",
                            "--version",
                            type=int,
                            required=True,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_set_pin_parser(sub_parser,
                         localization_obj):
    """
    Sets up the set pin sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("set_pin_uri_required_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            type=str,
                            required=True,
                            default=None,
                            help=help_str)

    help_str = localization_obj.get_msg("set_pin_pin_required_helpstr")
    sub_parser.add_argument("-p",
                            metavar="pin",
                            dest="pin",
                            type=str,
                            required=True,
                            help=help_str)

    help_str = localization_obj.get_msg("set_pin_version_required_helpstr")
    sub_parser.add_argument("-v",
                            metavar="version",
                            dest="version",
                            type=int,
                            required=True,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_delete_pin_parser(sub_parser,
                            localization_obj):
    """
    Sets up the delete pin sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("delete_pin_uri_required_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            type=str,
                            required=True,
                            default=None,
                            help=help_str)

    help_str = localization_obj.get_msg("delete_pin_pin_required_helpstr")
    sub_parser.add_argument("-p",
                            metavar="pin",
                            dest="pin",
                            type=str,
                            required=True,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_lock_pin_parser(sub_parser,
                          localization_obj):
    """
    Sets up the lock pin sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("lock_pin_uri_required_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            type=str,
                            required=True,
                            default=None,
                            help=help_str)

    help_str = localization_obj.get_msg("lock_pin_pin_required_helpstr")
    sub_parser.add_argument("-p",
                            metavar="pin",
                            dest="pin",
                            type=str,
                            required=True,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_unlock_pin_parser(sub_parser,
                            localization_obj):
    """
    Sets up the unlock pin sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("unlock_pin_uri_required_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            type=str,
                            required=True,
                            default=None,
                            help=help_str)

    help_str = localization_obj.get_msg("unlock_pin_pin_required_helpstr")
    sub_parser.add_argument("-p",
                            metavar="pin",
                            dest="pin",
                            type=str,
                            required=True,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_publish_parser(sub_parser,
                         localization_obj):
    """
    Sets up the publish sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("publish_uri_path_required_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            type=str,
                            required=True,
                            default=None,
                            help=help_str)

    help_str = localization_obj.get_msg("publish_source_paths_required_helpstr")
    sub_parser.add_argument("-p",
                            metavar="source-paths",
                            dest="source_paths",
                            nargs="+",
                            type=str,
                            required=True,
                            help=help_str)

    help_str = localization_obj.get_msg("publish_clean_publish_optional_helpstr")
    sub_parser.add_argument("-C",
                            "--clean-publish",
                            dest="clean_publish",
                            action="store_true",
                            help=help_str)

    help_str = localization_obj.get_msg("publish_verify_copy_optional_helpstr")
    sub_parser.add_argument("-V",
                            "--verified-copy",
                            dest="verified_copy",
                            action="store_true",
                            help=help_str)

    help_str = localization_obj.get_msg("publish_link_in_place_optional_helpstr")
    sub_parser.add_argument("-L",
                            "--link-in-place",
                            dest="link_in_place",
                            action="store_true",
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_delete_version_parser(sub_parser,
                                localization_obj):
    """
    Sets up the delete version sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("delete_uri_path_required_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            type=str,
                            required=True,
                            default=None,
                            help=help_str)

    help_str = localization_obj.get_msg("delete_version_required_helpstr")
    sub_parser.add_argument("-v",
                            metavar="version",
                            dest="version",
                            type=int,
                            required=True,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_collapse_parser(sub_parser,
                          localization_obj):
    """
    Sets up the collapse sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("collapse_uri_path_required_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            type=str,
                            required=True,
                            default=None,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# ----------------------------------------------------------------------------------------------------------------------
def setup_display_log_parser(sub_parser,
                             localization_obj):
    """
    Sets up the display log sub-parser.

    :param sub_parser:
            The sub-parser object to which we will add options.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language

    :return:
            Nothing
    """

    help_str = localization_obj.get_msg("display_log_uri_path_required_helpstr")
    sub_parser.add_argument("-u",
                            metavar="uri",
                            dest="uri",
                            type=str,
                            required=True,
                            default=None,
                            help=help_str)

    setup_shared_sub_parser_postfix(sub_parser=sub_parser,
                                    localization_obj=localization_obj)


# --------------------------------------------------------------------------------------------------------------------
def make_repo_manager(repo_list_p,
                      config_p,
                      language):
    """
    Creates and returns a repo manager object.

    :param repo_list_p:
            The path to the repo list file if one is given.
    :param config_p:
            The path to the config file.
    :param language:
            The language to use.

    :return:
            A repo manager object.
    """

    try:
        repo_manager_obj = RepoManager(repo_list_p=repo_list_p,
                                       config_p=config_p,
                                       language=language)
    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)
    except LocalizationError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)

    return repo_manager_obj


# ----------------------------------------------------------------------------------------------------------------------
def uri_from_name_and_path(repo_n,
                           uri_path):
    """
    Given a repo name and a uri_path, return a properly formatted uri. (repo://uri_path)

    :param repo_n:
            The name of the repo
    :param uri_path:
            The uri path of the asset

    :return:
            A string in the format: repo://uri_path
    """

    return f"{repo_n}://{uri_path}".format(repo_n=repo_n, uri_path=uri_path)


# ----------------------------------------------------------------------------------------------------------------------
def uri_list_from_name_and_paths(repo_n,
                                 uri_paths):
    """
    Given a repo name and a LIST of uri_paths, return a list of properly formatted uri's. (repo://uri_path)

    :param repo_n:
            The name of the repo
    :param uri_paths:
            A list of uri_paths

    :return:
            A list of strings in the format: repo://uri_path
    """

    output = list()

    for uri_path in uri_paths:
        output.append(uri_from_name_and_path(repo_n=repo_n, uri_path=uri_path))

    return output


# ----------------------------------------------------------------------------------------------------------------------
def subtask_make_repo(args,
                      repo_manager_obj):
    """
    Create a new repo.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.

    :return:
            Nothing.
    """

    try:
        repo_manager_obj.make_repo(args.directory)
        repo_manager_obj.save_repo_list_file()
    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)
    except LocalizationError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_add_repo(args,
                     repo_manager_obj):
    """
    Add an existing repo.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.

    :return:
            Nothing.
    """

    try:
        repo_manager_obj.add_repo(args.directory)
        repo_manager_obj.save_repo_list_file()
    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)
    except LocalizationError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_remove_repo(args,
                        repo_manager_obj):
    """
    Remove an existing repo.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.

    :return:
            Nothing.
    """

    try:
        repo_manager_obj.unload_repo(args.repo_name)
        repo_manager_obj.save_repo_list_file()
    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)
    except LocalizationError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_rebuild_repo(args,
                         repo_manager_obj):
    """
    Re-blesses an existing repo.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.

    :return:
            Nothing.
    """

    try:
        repo_manager_obj.bless_repo(args.repo_path)
    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)
    except LocalizationError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_list_repos(args,
                       repo_manager_obj):
    """
    lists the existing repos.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.

    :return:
            Nothing.
    """

    try:
        repo_objs = repo_manager_obj.list_repos()
    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)
    except LocalizationError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)

    for repo_obj in repo_objs:
        if args.include_paths:
            print(repo_obj.repo_n, "->", repo_obj.repo_root_d)
        else:
            print(repo_obj.repo_n)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_list_missing_repos(args,
                               repo_manager_obj):
    """
    lists the missing repos (repos in the repo list file that do not exist on disk).

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.

    :return:
            Nothing.
    """

    try:
        broken_repos = repo_manager_obj.list_broken_repos()
    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)
    except LocalizationError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)

    for key, value in broken_repos.items():
        if args.include_paths:
            print(key, "->", value)
        else:
            print(key)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_remove_missing_repos(repo_manager_obj):
    """
    Removes missing repos (repos that exist in the repo list file but do not exist on disk).

    :param repo_manager_obj:
            A repo manager object.

    :return:
            Nothing.
    """

    try:
        repo_manager_obj.save_repo_list_file()
    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)
    except LocalizationError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_list_default_repo(args,
                              repo_manager_obj,
                              localization_obj):
    """
    lists the default repo.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.
    :param localization_obj:
            The localization object for error messages and the like.

    :return:
            Nothing.
    """

    if repo_manager_obj.default_repo is not None:
        if args.include_path:
            print(repo_manager_obj.default_repo.repo_n, "->", repo_manager_obj.default_repo.repo_root_d)
        else:
            print(repo_manager_obj.default_repo.repo_n)
    else:
        msg = localization_obj.get_msg("list_default_repo_no_default_repo")
        print(msg)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_set_default_repo(args,
                             repo_manager_obj):
    """
    Sets the default repo.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.

    :return:
            Nothing.
    """

    try:
        repo_manager_obj.set_default_repo(args.repo)
        repo_manager_obj.save_repo_list_file()
    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)
    except LocalizationError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_update_repo_caches(args,
                               repo_manager_obj):
    """
    Updates the repo cache.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.

    :return:
            Nothing.
    """

    if args.all_repos:

        try:
            repo_manager_obj.cache_all_repos()
        except SquirrelError as e:
            print(f"({e.code}) {e.message}")
            sys.exit(e.code)

    else:

        try:
            uri = repo_manager_obj.disambiguate_uri(uri=args.uri,
                                                    repo_required=True,
                                                    path_required=False,
                                                    name_required=False)
            repo_manager_obj.cache_repo(uri=uri)
        except SquirrelError as e:
            print(f"({e.code}) {e.message}")
            sys.exit(e.code)
        except LocalizationError as e:
            print(f"({e.code}) {e.message}")
            sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_list_cache_path(repo_manager_obj):
    """
    Updates the repo cache.

    :param repo_manager_obj:
            A repo manager object.

    :return:
            Nothing.
    """

    print(repo_manager_obj.cache_obj.cache_p)


# ----------------------------------------------------------------------------------------------------------------------
def print_heading(char,
                  max_lengths):
    """

    """

    headings = dict()
    headings["n"] = "NAME"
    headings["p"] = "PATH"
    headings["u"] = "URI"
    headings["U"] = "URI PATH"
    headings["k"] = "KEYWORDS"
    headings["m"] = "METADATA"
    headings["v"] = "VERSIONS"
    headings["V"] = "LATEST VER"
    headings["P"] = "PINS"
    headings["N"] = "NOTES"
    headings["t"] = "THUMBNAILS"
    headings["O"] = "POSTER"

    print("  | ", end="")
    print(headings[char].ljust(max_lengths[char], " "), end="")


# ----------------------------------------------------------------------------------------------------------------------
def print_underlines(char,
                     max_lengths):
    """

    """

    print("==|=", end="")
    print("=" * max_lengths[char], end="")


# ----------------------------------------------------------------------------------------------------------------------
def print_asset_data(asset_obj,
                     repo_manager_obj,
                     char,
                     max_lengths):
    """

    """

    if char == "n":
        print("  | ", end="")
        print(asset_obj.asset_n.ljust(max_lengths[char], " "), end="")

    if char == "p":
        print("  | ", end="")
        print(asset_obj.asset_d.ljust(max_lengths[char], " "), end="")

    if char == "u":
        uri = repo_manager_obj.uri_from_asset_path(asset_obj.asset_d)
        print("  | ", end="")
        print(uri.ljust(max_lengths[char], " "), end="")

    if char == "U":
        uri_path = repo_manager_obj.uri_path_from_asset_path(asset_obj.asset_d)
        print("  | ", end="")
        print(uri_path.ljust(max_lengths[char], " "), end="")

    if char == "k":
        keywords = asset_obj.list_keywords()
        keywords.sort()
        print("  | ", end="")
        print(" ".join(keywords).ljust(max_lengths[char], " "), end="")

    if char == "m":
        metadata = asset_obj.list_key_value_pairs()
        print("  | ", end="")
        output = list()
        for key, value in metadata.items():
            output.append(f"{key}={value}")
        print(" ".join(output).ljust(max_lengths[char], " "), end="")

    if char == "v":
        versions = asset_obj.list_versions()
        versions.sort()
        print("  | ", end="")
        print(" ".join(versions).ljust(max_lengths[char], " "), end="")

    if char == "V":
        print("  | ", end="")
        print(asset_obj.list_latest_version().ljust(max_lengths[char]), end="")

    if char == "P":
        print("  | ", end="")
        print(" ".join(asset_obj.list_pins()).ljust(max_lengths[char]), end="")

    if char == "N":
        print("  | ", end="")
        print(asset_obj.list_asset_notes().replace("\n", " - ").ljust(max_lengths[char]), end="")

    if char == "t":
        print("  | ", end="")
        framespec = Framespec()
        framespec.files = asset_obj.list_thumbnails()
        print(framespec.framespec_str.ljust(max_lengths[char]), end="")

    if char == "O":
        print("  | ", end="")
        print(asset_obj.list_poster().ljust(max_lengths[char]), end="")


# ----------------------------------------------------------------------------------------------------------------------
def subtask_list_assets(args,
                        repo_manager_obj,
                        localization_obj):
    """
    lists the assets in a repo.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.
    :param localization_obj:
            The localization object for error messages and the like.

    :return:
            Nothing.
    """

    config_obj = setupconfig.create_config_object(validation_dict=constants.COMMAND_LINE_CONFIG_SECTIONS,
                                                  localized_resource_obj=localization_obj,
                                                  config_p=args.config_path)

    fields_format = config_obj.get_string("command_line_settings", "default_fields")
    for char in fields_format:
        if char not in "npuUkmNtvVP":
            err_msg = localization_obj.get_error_msg(2)
            err_msg = err_msg.format(char=char)
            print(err_msg)
            return

    if not args.format:
        args.format = fields_format

    for char in args.format:
        if char not in "npuUkmNtvVPO":
            err_msg = localization_obj.get_error_msg(1)
            err_msg = err_msg.format(char=char)
            print(err_msg)
            return

    if args.metadata_keys_and_values is not None:
        metadata_keys_and_values = list()
        for item in args.metadata_keys_and_values:

            if "!=" in item:
                comparison_type = "!="
            elif ">=" in item:
                comparison_type = ">="
            elif "<=" in item:
                comparison_type = "<="
            elif "=>" in item:
                comparison_type = ">="
            elif "=<" in item:
                comparison_type = "<="
            elif "=" in item:
                comparison_type = "="
            elif ">" in item:
                comparison_type = ">"
            elif "<" in item:
                comparison_type = "<"
            else:
                comparison_type = None

            if comparison_type is not None:
                key, value = item.split(comparison_type)
                metadata_keys_and_values.append((key, comparison_type, value))
            else:
                metadata_keys_and_values.append((item, "", ""))

    else:
        metadata_keys_and_values = None

    print(localization_obj.get_msg("retrieving_data"))
    asset_objs = list()
    try:
        if args.uri is None:
            args.uri = [None]
        for user_uri in args.uri:
            uri = repo_manager_obj.disambiguate_uri(uri=user_uri,
                                                    repo_required=False,
                                                    path_required=False,
                                                    name_required=False)

            repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
            asset_objs.extend(repo_obj.get_asset_objs_from_cache(uri=uri,
                                                                 keywords=args.keywords,
                                                                 metadata_keys=args.metadata_keys,
                                                                 metadata_key_and_values=metadata_keys_and_values,
                                                                 kw_match_use_and=args.keywords_and,
                                                                 meta_match_use_and=args.metadata_and))

    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)
    except LocalizationError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)

    print("Formatting data:")
    max_lengths = dict()
    max_lengths["n"] = 10
    max_lengths["p"] = 4
    max_lengths["u"] = 3
    max_lengths["U"] = 8
    max_lengths["k"] = 8
    max_lengths["m"] = 8
    max_lengths["v"] = 8
    max_lengths["V"] = 10
    max_lengths["P"] = 4
    max_lengths["N"] = 5
    max_lengths["t"] = 10
    max_lengths["O"] = 6

    asset_count = len(asset_objs)
    curr_asset = 1
    for asset_obj in asset_objs:

        print(f"{str(curr_asset)} of {str(asset_count)}", end="\r")
        curr_asset += 1
        sys.stdout.flush()
        max_lengths["n"] = max(max_lengths["n"], len(asset_obj.asset_n))
        max_lengths["p"] = max(max_lengths["p"], len(asset_obj.asset_d))
        max_lengths["u"] = max(max_lengths["u"], len(repo_manager_obj.uri_from_asset_path(asset_obj.asset_d)))
        max_lengths["U"] = max(max_lengths["U"], len(repo_manager_obj.uri_path_from_asset_path(asset_obj.asset_d)))
        max_lengths["k"] = max(max_lengths["k"], len(" ".join(asset_obj.list_keywords())))
        metadata = [f"{k}={v}" for k, v in asset_obj.list_key_value_pairs().items()]
        max_lengths["m"] = max(max_lengths["m"], len(" ".join(metadata)))
        max_lengths["v"] = max(max_lengths["v"], len(" ".join(asset_obj.list_versions())))
        max_lengths["V"] = max(max_lengths["V"], len(asset_obj.list_latest_version()))
        max_lengths["P"] = max(max_lengths["P"], len(" ".join(asset_obj.list_pins())))
        max_lengths["N"] = max(max_lengths["N"], len(asset_obj.list_asset_notes().replace("\n", " - ")))
        max_lengths["O"] = max(max_lengths["N"], len(asset_obj.list_poster()))
        framespec = Framespec()
        framespec.files = asset_obj.list_thumbnails()
        max_lengths["t"] = max(max_lengths["t"], len(framespec.framespec_str))
    print("\n\n")

    for char in args.format:
        print_heading(char, max_lengths)
    print()

    for char in args.format:
        print_underlines(char, max_lengths)
    print()

    for asset_obj in asset_objs:
        for char in args.format:
            print_asset_data(asset_obj=asset_obj,
                             repo_manager_obj=repo_manager_obj,
                             char=char,
                             max_lengths=max_lengths)
        print()


# ----------------------------------------------------------------------------------------------------------------------
def subtask_list_keywords(args,
                          repo_manager_obj):
    """
    lists the keywords used anywhere in a repo.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.

    :return:
            Nothing.
    """

    keywords = list()

    try:
        if args.uri is None:
            args.uri = [None]
        for user_uri in args.uri:
            uri = repo_manager_obj.disambiguate_uri(uri=user_uri,
                                                    repo_required=False,
                                                    path_required=False,
                                                    name_required=False)
            repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
            keywords.extend(repo_obj.list_keywords_from_cache(uri=uri))

    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)
    except LocalizationError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)

    keywords = list(set(keywords))
    keywords.sort()
    print("\n".join(keywords))


# ----------------------------------------------------------------------------------------------------------------------
def subtask_add_keywords(args,
                         repo_manager_obj,
                         log_str):
    """
    Adds keywords to an asset.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.
    :param log_str:
            A string to append to the log.

    :return:
            Nothing.
    """

    try:
        for user_uri in args.uri:
            uri = repo_manager_obj.disambiguate_uri(uri=user_uri,
                                                    repo_required=False,
                                                    path_required=False,
                                                    name_required=False)
            repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
            repo_obj.add_keywords(uri=uri,
                                  keywords=args.keywords,
                                  log_str=log_str)

    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)
    except LocalizationError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_delete_keywords(args,
                            repo_manager_obj,
                            log_str):
    """
    Deletes keywords from an asset.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.
    :param log_str:
            A string to append to the log.

    :return:
            Nothing.
    """

    try:
        for user_uri in args.uri:
            uri = repo_manager_obj.disambiguate_uri(uri=user_uri,
                                                    repo_required=False,
                                                    path_required=False,
                                                    name_required=True)
            repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
            repo_obj.delete_keywords(uri=uri,
                                     keywords=args.keywords,
                                     log_str=log_str)

    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)
    except LocalizationError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_delete_all_keywords(args,
                                repo_manager_obj,
                                log_str):
    """
    Deletes all keywords from an asset.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.
    :param log_str:
            A string to append to the log.

    :return:
            Nothing.
    """

    try:
        for user_uri in args.uri:
            uri = repo_manager_obj.disambiguate_uri(uri=user_uri,
                                                    repo_required=False,
                                                    path_required=False,
                                                    name_required=True)
            repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
            repo_obj.delete_all_keywords(uri=uri,
                                         log_str=log_str)

    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)
    except LocalizationError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_list_metadata_keys(args,
                               repo_manager_obj):
    """
    lists the metadata keys used anywhere in a repo.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.

    :return:
            Nothing.
    """

    metadata_keys = list()

    try:
        if args.uri is None:
            args.uri = [None]
        for user_uri in args.uri:
            uri = repo_manager_obj.disambiguate_uri(uri=user_uri,
                                                    repo_required=False,
                                                    path_required=False,
                                                    name_required=False)
            repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
            metadata_keys.extend(repo_obj.list_metadata_keys(uri=uri))

    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)
    except LocalizationError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)

    metadata_keys = list(set(metadata_keys))
    metadata_keys.sort()
    print("\n".join(metadata_keys))


# ----------------------------------------------------------------------------------------------------------------------
def subtask_add_metadata(args,
                         repo_manager_obj,
                         log_str):
    """
    Adds metadata to an asset.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.
    :param log_str:
            A string to append to the log

    :return:
            Nothing.
    """

    try:
        for user_uri in args.uri:
            uri = repo_manager_obj.disambiguate_uri(uri=user_uri,
                                                    repo_required=False,
                                                    path_required=False,
                                                    name_required=True)
            repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
            repo_obj.add_metadata(uri=uri,
                                  metadata=args.metadata,
                                  log_str=log_str)

    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)
    except LocalizationError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_delete_metadata(args,
                            repo_manager_obj,
                            log_str):
    """
    deletes metadata from an asset.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.
    :param log_str:
            A string to append to the log

    :return:
            Nothing.
    """

    try:
        for user_uri in args.uri:
            uri = repo_manager_obj.disambiguate_uri(uri=user_uri,
                                                    repo_required=False,
                                                    path_required=False,
                                                    name_required=True)
            repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
            repo_obj.delete_metadata(uri=uri,
                                     metadata_keys=args.metadata,
                                     log_str=log_str)

    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)
    except LocalizationError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_delete_all_metadata(args,
                                repo_manager_obj,
                                log_str):
    """
    deletes metadata from an asset.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.
    :param log_str:
            A string to append to the log

    :return:
            Nothing.
    """

    try:
        for user_uri in args.uri:
            uri = repo_manager_obj.disambiguate_uri(uri=user_uri,
                                                    repo_required=False,
                                                    path_required=False,
                                                    name_required=True)
            repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
            repo_obj.delete_all_metadata(uri=uri,
                                         log_str=log_str)

    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)
    except LocalizationError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_list_version_notes(args,
                               repo_manager_obj):
    """
    Lists notes from a version of an asset.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.

    :return:
            Nothing.
    """

    try:
        uri = repo_manager_obj.disambiguate_uri(uri=args.uri,
                                                repo_required=False,
                                                path_required=False,
                                                name_required=True)
        repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
        notes = repo_obj.list_version_notes(uri=uri,
                                            version_int=args.version)

    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)
    except LocalizationError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)

    print(notes)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_add_version_notes(args,
                              repo_manager_obj,
                              log_str):
    """
    Adds notes to a version of an asset.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.
    :param log_str:
            A string to append to the log

    :return:
            Nothing.
    """

    args.notes = " ".join(args.notes)

    try:
        uri = repo_manager_obj.disambiguate_uri(uri=args.uri,
                                                repo_required=False,
                                                path_required=False,
                                                name_required=True)
        repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
        repo_obj.add_version_notes(notes=args.notes,
                                   uri=uri,
                                   version_int=args.version,
                                   overwrite=args.overwrite,
                                   log_str=log_str)
    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_delete_version_notes(args,
                                 repo_manager_obj,
                                 log_str):
    """
    Deletes notes from a version of an asset.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.
    :param log_str:
            A string to append to the log

    :return:
            Nothing.
    """

    try:
        uri = repo_manager_obj.disambiguate_uri(uri=args.uri,
                                                repo_required=False,
                                                path_required=False,
                                                name_required=True)
        repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
        repo_obj.delete_version_notes(uri=uri,
                                      version_int=args.version,
                                      log_str=log_str)
    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_list_asset_notes(args,
                             repo_manager_obj):
    """
    Lists notes from an asset.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.

    :return:
            Nothing.
    """

    try:
        uri = repo_manager_obj.disambiguate_uri(uri=args.uri,
                                                repo_required=False,
                                                path_required=False,
                                                name_required=True)
        repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
        notes = repo_obj.list_asset_notes(uri=uri)

    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)
    except LocalizationError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)

    print(notes)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_add_asset_notes(args,
                            repo_manager_obj,
                            log_str):
    """
    Adds notes to an asset.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.
    :param log_str:
            A string to append to the log

    :return:
            Nothing.
    """

    args.notes = " ".join(args.notes)

    try:
        uri = repo_manager_obj.disambiguate_uri(uri=args.uri,
                                                repo_required=False,
                                                path_required=False,
                                                name_required=True)
        repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
        repo_obj.add_asset_notes(notes=args.notes,
                                 uri=uri,
                                 overwrite=args.overwrite,
                                 log_str=log_str)
    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_delete_asset_notes(args,
                               repo_manager_obj,
                               log_str):
    """
    Deletes notes from an asset.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.
    :param log_str:
            A string to append to the log

    :return:
            Nothing.
    """

    try:
        uri = repo_manager_obj.disambiguate_uri(uri=args.uri,
                                                repo_required=False,
                                                path_required=False,
                                                name_required=True)
        repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
        repo_obj.delete_asset_notes(uri=uri,
                                    log_str=log_str)
    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_list_thumbnails(args,
                            repo_manager_obj):
    """
    Lists thumbnails on an asset.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.

    :return:
            Nothing.
    """

    try:
        uri = repo_manager_obj.disambiguate_uri(uri=args.uri,
                                                repo_required=False,
                                                path_required=False,
                                                name_required=True)
        repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
        thumbnails = repo_obj.list_thumbnails(uri=uri,
                                              version_int=args.version)

        for thumbnail in thumbnails:
            print(thumbnail)

    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_add_thumbnails(args,
                           repo_manager_obj,
                           localization_obj,
                           log_str):
    """
    Adds thumbnails to an asset.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.
    :param localization_obj:
            The localization object for error messages and the like.
    :param log_str:
            A string to append to the log

    :return:
            Nothing.
    """

    if args.poster_frame_num is None:
        args.poster_frame_num = "0"

    if int(args.poster_frame_num) < 0 or int(args.poster_frame_num) > len(args.thumbnails_p):
        err_msg = localization_obj.get_error_msg(11007)
        err_msg = err_msg.format(frame_no=args.poster_frame_num, frame_range=f"1 to {len(args.thumbnails_p)}")
        raise SquirrelError(err_msg, 11007)

    try:
        uri = repo_manager_obj.disambiguate_uri(uri=args.uri,
                                                repo_required=False,
                                                path_required=False,
                                                name_required=True)
        repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
        repo_obj.add_thumbnails(uri=uri,
                                thumbnails_p=args.thumbnails_p,
                                poster_p=args.thumbnails_p[int(args.poster_frame_num) - 1],
                                version_int=args.version,
                                log_str=log_str)
    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_delete_thumbnails(args,
                              repo_manager_obj,
                              localization_obj,
                              log_str):
    """
    Deletes thumbnails from an asset.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.
    :param localization_obj:
            The localization object for error messages and the like.
    :param log_str:
            A string to append to the log

    :return:
            Nothing.
    """

    # verify that they want to actually do this
    msg = localization_obj.get_msg("delete_thumbnails_are_you_sure")
    print(msg.format(version=args.version))
    msg = localization_obj.get_msg("generic_are_you_sure")
    result = input(msg)
    if not result.upper() == "YES":
        msg = localization_obj.get_msg("canceled")
        print(msg)
        return

    try:
        uri = repo_manager_obj.disambiguate_uri(uri=args.uri,
                                                repo_required=False,
                                                path_required=False,
                                                name_required=True)
        repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
        repo_obj.delete_thumbnails(uri=uri,
                                   version_int=args.version,
                                   log_str=log_str)
    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_set_pin(args,
                    repo_manager_obj,
                    log_str):
    """
    Sets a pin.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.
    :param log_str:
            A string to append to the log

    :return:
            Nothing.
    """

    try:
        uri = repo_manager_obj.disambiguate_uri(uri=args.uri,
                                                repo_required=False,
                                                path_required=False,
                                                name_required=True)
        repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
        repo_obj.set_pin(uri=uri,
                         pin_n=args.pin,
                         version_int=args.version,
                         log_str=log_str)
    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_delete_pin(args,
                       repo_manager_obj,
                       log_str):
    """
    Sets a pin.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.
    :param log_str:
            A string to append to the log

    :return:
            Nothing.
    """

    try:
        uri = repo_manager_obj.disambiguate_uri(uri=args.uri,
                                                repo_required=False,
                                                path_required=False,
                                                name_required=True)
        repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
        repo_obj.delete_pin(uri=uri,
                            pin_n=args.pin,
                            allow_delete_locked=False,
                            log_str=log_str)
    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_lock_pin(args,
                     repo_manager_obj,
                     log_str):
    """
    Locks a pin.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.
    :param log_str:
            A string to append to the log

    :return:
            Nothing.
    """

    try:
        uri = repo_manager_obj.disambiguate_uri(uri=args.uri,
                                                repo_required=False,
                                                path_required=False,
                                                name_required=True)
        repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
        repo_obj.lock_pin(uri=uri,
                          pin_n=args.pin,
                          log_str=log_str)
    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_unlock_pin(args,
                       repo_manager_obj,
                       log_str):
    """
    Unlocks a pin.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.
    :param log_str:
            A string to append to the log

    :return:
            Nothing.
    """

    try:
        uri = repo_manager_obj.disambiguate_uri(uri=args.uri,
                                                repo_required=False,
                                                path_required=False,
                                                name_required=True)
        repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
        repo_obj.unlock_pin(uri=uri,
                            pin_n=args.pin,
                            log_str=log_str)
    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_publish(args,
                    repo_manager_obj,
                    log_str):
    """
    Publish an asset.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.
    :param log_str:
            A string to append to the log

    :return:
            Nothing.
    """

    try:
        uri = repo_manager_obj.disambiguate_uri(uri=args.uri,
                                                repo_required=False,
                                                path_required=True,
                                                name_required=True,
                                                name_must_exist=False)
        repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
        repo_obj.publish(uri=uri,
                         items=args.source_paths,
                         merge=not args.clean_publish,
                         do_verified_copy=args.verified_copy,
                         link_in_place=args.link_in_place,
                         log_str=log_str)
    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_delete_version(args,
                           repo_manager_obj,
                           localization_obj,
                           log_str):
    """
    Delete a specific version of an asset.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.
    :param localization_obj:
            The localization object for error messages and the like.
    :param log_str:
            A string to append to the log

    :return:
            Nothing.
    """

    # verify that they want to actually do this
    msg = localization_obj.get_msg("delete_version_are_you_sure")
    print(msg)
    msg = localization_obj.get_msg("delete_version_continue")
    msg = msg.format(version=args.version, asset=args.uri.split("#")[1])
    result = input(msg)
    if not result.upper() == "YES":
        msg = localization_obj.get_msg("canceled")
        print(msg)
        return

    try:
        uri = repo_manager_obj.disambiguate_uri(uri=args.uri,
                                                repo_required=False,
                                                path_required=False,
                                                name_required=True,
                                                name_must_exist=False)
        repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
        repo_obj.delete_version(uri=uri,
                                version_int=args.version,
                                log_str=log_str)
    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_collapse(args,
                     repo_manager_obj,
                     localization_obj,
                     log_str):
    """
    Collapse an asset.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.
    :param localization_obj:
            The localization object for error messages and the like.
    :param log_str:
            A string to append to the log

    :return:
            Nothing.
    """

    # verify that they want to actually do this
    msg = localization_obj.get_msg("collapse_are_you_sure")
    print(msg)
    msg = localization_obj.get_msg("collapse_continue")
    msg = msg.format(asset=args.uri.split("#")[1])
    result = input(msg)
    if not result.upper() == "YES":
        msg = localization_obj.get_msg("canceled")
        print(msg)
        return

    try:
        uri = repo_manager_obj.disambiguate_uri(uri=args.uri,
                                                repo_required=False,
                                                path_required=False,
                                                name_required=True,
                                                name_must_exist=False)
        repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
        repo_obj.collapse(uri=uri,
                          log_str=log_str)
    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def subtask_display_log(args,
                        repo_manager_obj):
    """
    Displays an asset's log.

    :param args:
            The parsed arguments object.
    :param repo_manager_obj:
            A repo manager object.

    :return:
            Nothing.
    """

    try:
        uri = repo_manager_obj.disambiguate_uri(uri=args.uri,
                                                repo_required=False,
                                                path_required=False,
                                                name_required=True,
                                                name_must_exist=True)
        repo_obj = repo_manager_obj.repo_obj_from_uri(uri)
        lines = repo_obj.display_log(uri=uri)
        print(lines)
    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)


# ----------------------------------------------------------------------------------------------------------------------
def validate_args(args,
                  localization_obj):
    """
    Perform some basic validation on the args passed by the user.

    :param args:
            The args passed by the user.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language.

    :return:
            True if the validations pan out. False otherwise.
    """

    if args.config_path is not None:
        if not os.path.exists(args.config_path):
            err_msg = localization_obj.get_error_msg(503)
            err_msg = err_msg.format(config=args.config_path)
            print(err_msg)
            sys.exit(503)


# ----------------------------------------------------------------------------------------------------------------------
def run_sub_task(args,
                 localization_obj,
                 repo_manager_obj):
    """
    Runs the appropriate sub-task depending on the user's choice.

    :param args:
            The parsed arguments from the user.
    :param localization_obj:
            The localization object that contains all of the help strings in the appropriate language.
    :param repo_manager_obj:
            The repo manager object.

    :return:
    """

    validate_args(args, localization_obj)

    log_str = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    log_str += " " + getpass.getuser() + ": "

    try:

        if args.sub_task.upper() in ["MAKE-REPO", "MR"]:
            subtask_make_repo(args=args,
                              repo_manager_obj=repo_manager_obj)
            return

        if args.sub_task.upper() in ["ADD-REPO", "AR"]:
            subtask_add_repo(args=args,
                             repo_manager_obj=repo_manager_obj)
            return

        if args.sub_task.upper() in ["REMOVE-REPO", "REMR"]:
            subtask_remove_repo(args=args,
                                repo_manager_obj=repo_manager_obj)
            return

        if args.sub_task.upper() in ["REBUILD-REPO", "RR"]:
            subtask_rebuild_repo(args=args,
                                 repo_manager_obj=repo_manager_obj)
            return

        if args.sub_task.upper() in ["LIST-REPOS", "LR"]:
            subtask_list_repos(args=args,
                               repo_manager_obj=repo_manager_obj)
            return

        if args.sub_task.upper() in ["LIST-MISSING-REPOS", "LMR"]:
            subtask_list_missing_repos(args=args,
                                       repo_manager_obj=repo_manager_obj)
            return

        if args.sub_task.upper() in ["REMOVE-MISSING-REPOS", "RMR"]:
            subtask_remove_missing_repos(repo_manager_obj=repo_manager_obj)
            return

        if args.sub_task.upper() in ["LIST-DEFAULT-REPO", "LDR"]:
            subtask_list_default_repo(args=args,
                                      repo_manager_obj=repo_manager_obj,
                                      localization_obj=localization_obj)
            return

        if args.sub_task.upper() in ["SET-DEFAULT-REPO", "SDR"]:
            subtask_set_default_repo(args=args,
                                     repo_manager_obj=repo_manager_obj)
            return

        if args.sub_task.upper() in ["UPDATE-REPO-CACHES", "URC"]:
            subtask_update_repo_caches(args=args,
                                       repo_manager_obj=repo_manager_obj)
            return

        if args.sub_task.upper() in ["LIST-CACHE-PATH", "LCP"]:
            subtask_list_cache_path(repo_manager_obj=repo_manager_obj)
            return

        if args.sub_task.upper() in ["LIST-ASSETS", "LA"]:
            subtask_list_assets(args=args,
                                repo_manager_obj=repo_manager_obj,
                                localization_obj=localization_obj)
            return

        if args.sub_task.upper() in ["ADD-KEYWORDS", "AK"]:
            subtask_add_keywords(args=args,
                                 repo_manager_obj=repo_manager_obj,
                                 log_str=log_str)
            return

        if args.sub_task.upper() in ["DELETE-KEYWORDS", "DK"]:
            subtask_delete_keywords(args=args,
                                    repo_manager_obj=repo_manager_obj,
                                    log_str=log_str)
            return

        if args.sub_task.upper() in ["DELETE-ALL-KEYWORDS", "DAK"]:
            subtask_delete_all_keywords(args=args,
                                        repo_manager_obj=repo_manager_obj,
                                        log_str=log_str)
            return

        if args.sub_task.upper() in ["LIST-KEYWORDS", "LK"]:
            subtask_list_keywords(args=args,
                                  repo_manager_obj=repo_manager_obj)
            return

        if args.sub_task.upper() in ["LIST-METADATA", "LM"]:
            subtask_list_metadata_keys(args=args,
                                       repo_manager_obj=repo_manager_obj)
            return

        if args.sub_task.upper() in ["ADD-METADATA", "AM"]:
            subtask_add_metadata(args=args,
                                 repo_manager_obj=repo_manager_obj,
                                 log_str=log_str)
            return

        if args.sub_task.upper() in ["DELETE-METADATA", "DM"]:
            subtask_delete_metadata(args=args,
                                    repo_manager_obj=repo_manager_obj,
                                    log_str=log_str)
            return

        if args.sub_task.upper() in ["DELETE-ALL-METADATA", "DAM"]:
            subtask_delete_all_metadata(args=args,
                                        repo_manager_obj=repo_manager_obj,
                                        log_str=log_str)
            return

        if args.sub_task.upper() in ["ADD-VERSION-NOTES", "AVN"]:
            subtask_add_version_notes(args=args,
                                      repo_manager_obj=repo_manager_obj,
                                      log_str=log_str)
            return

        if args.sub_task.upper() in ["DELETE-VERSION-NOTES", "DVN"]:
            subtask_delete_version_notes(args=args,
                                         repo_manager_obj=repo_manager_obj,
                                         log_str=log_str)
            return

        if args.sub_task.upper() in ["LIST-VERSION-NOTES", "LVN"]:
            subtask_list_version_notes(args=args,
                                       repo_manager_obj=repo_manager_obj)
            return

        if args.sub_task.upper() in ["ADD-ASSET-NOTES", "AAN"]:
            subtask_add_asset_notes(args=args,
                                    repo_manager_obj=repo_manager_obj,
                                    log_str=log_str)
            return

        if args.sub_task.upper() in ["DELETE-ASSET-NOTES", "DAN"]:
            subtask_delete_asset_notes(args=args,
                                       repo_manager_obj=repo_manager_obj,
                                       log_str=log_str)
            return

        if args.sub_task.upper() in ["LIST-ASSET-NOTES", "LAN"]:
            subtask_list_asset_notes(args=args,
                                     repo_manager_obj=repo_manager_obj)
            return

        if args.sub_task.upper() in ["LIST-THUMBNAILS", "LT"]:
            subtask_list_thumbnails(args=args,
                                    repo_manager_obj=repo_manager_obj)
            return

        if args.sub_task.upper() in ["ADD-THUMBNAILS", "AT"]:
            subtask_add_thumbnails(args=args,
                                   repo_manager_obj=repo_manager_obj,
                                   localization_obj=localization_obj,
                                   log_str=log_str)
            return

        if args.sub_task.upper() in ["DELETE-THUMBNAILS", "DT"]:
            subtask_delete_thumbnails(args=args,
                                      repo_manager_obj=repo_manager_obj,
                                      localization_obj=localization_obj,
                                      log_str=log_str)
            return

        if args.sub_task.upper() in ["SET-PIN", "SP"]:
            subtask_set_pin(args=args,
                            repo_manager_obj=repo_manager_obj,
                            log_str=log_str)
            return

        if args.sub_task.upper() in ["DELETE-PIN", "DP"]:
            subtask_delete_pin(args=args,
                               repo_manager_obj=repo_manager_obj,
                               log_str=log_str)
            return

        if args.sub_task.upper() in ["LOCK-PIN", "LP"]:
            subtask_lock_pin(args=args,
                             repo_manager_obj=repo_manager_obj,
                             log_str=log_str)
            return

        if args.sub_task.upper() in ["UNLOCK-PIN", "UP"]:
            subtask_unlock_pin(args=args,
                               repo_manager_obj=repo_manager_obj,
                               log_str=log_str)
            return

        if args.sub_task.upper() in ["PUBLISH", "P"]:
            subtask_publish(args=args,
                            repo_manager_obj=repo_manager_obj,
                            log_str=log_str)
            return

        if args.sub_task.upper() in ["DELETE-VERSION", "DV"]:
            subtask_delete_version(args=args,
                                   repo_manager_obj=repo_manager_obj,
                                   localization_obj=localization_obj,
                                   log_str=log_str)

        if args.sub_task.upper() in ["COLLAPSE", "C"]:
            subtask_collapse(args=args,
                             repo_manager_obj=repo_manager_obj,
                             localization_obj=localization_obj,
                             log_str=log_str)
            return

        if args.sub_task.upper() in ["DISPLAY-LOG", "DL"]:
            subtask_display_log(args=args,
                                repo_manager_obj=repo_manager_obj)
            return

    except SquirrelError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)

    except LocalizationError as e:
        print(f"({e.code}) {e.message}")
        sys.exit(e.code)

#
    # if args.sub_task.upper() in ["QUICK-STORE", "QS"]:
    #     subtask_quick_store(args, localization_obj)
    #     return
    #
    # if args.sub_task.upper() in ["SET-PIN", "SP"]:
    #     subtask_set_pin(args, localization_obj)
    #     return
    #
    # if args.sub_task.upper() in ["LIST-PINS", "LP"]:
    #     subtask_list_pins(args)
    #     return
    #
    # if args.sub_task.upper() in ["DELETE-PIN", "DP"]:
    #     subtask_delete_pin(args)
    #     return
    #
    # if args.sub_task.upper() in ["DELETE_KEYWORDS", "DK"]:
    #     subtask_delete_keywords(args)
    #     return
    #
    # if args.sub_task.upper() in ["LIST_KEYWORDS", "LK"]:
    #     subtask_list_keywords(args)
    #     return
    #
    # if args.sub_task.upper() in ["DELETE_METADATA", "DM"]:
    #     subtask_delete_metadata(args)
    #     return
    #
    # if args.sub_task.upper() in ["LIST_METADATA", "LM"]:
    #     subtask_list_metadata(args)
    #     return
    #
    # if args.sub_task.upper() in ["ADD_NOTES", "AN"]:
    #     subtask_add_notes(args, config_obj)
    #     return
    #
    # if args.sub_task.upper() in ["DISPLAY_NOTES", "DN"]:
    #     subtask_display_notes(args, config_obj)
    #     return
    #
    # if args.sub_task.upper() in ["APPEND_LOG", "AL"]:
    #     subtask_append_log(args)
    #     return
    #
    # if args.sub_task.upper() in ["DISPLAY_LOG", "DL"]:
    #     subtask_display_log(args)
    #     return
    #
    # if args.sub_task.upper() in ["DELETE_VERSION", "DV"]:
    #     subtask_delete_version(args, config_obj)
    #     return
    #
    # if args.sub_task.upper() in ["COLLAPSE_ASSET", "CA"]:
    #     subtask_collapse_asset(args, localization_obj)
    #     return


# ----------------------------------------------------------------------------------------------------------------------
def main():

    language = get_language()
    localization_obj = create_localization_object(language)

    args = initial_parser_setup(localization_obj)

    repo_manager_obj = make_repo_manager(repo_list_p=args.repo_list_path,
                                         config_p=args.config_path,
                                         language=language)

    run_sub_task(args=args,
                 localization_obj=localization_obj,
                 repo_manager_obj=repo_manager_obj)


# ----------------------------------------------------------------------------------------------------------------------
def test():

    language = get_language()
    localization_obj = create_localization_object(language)

    args = initial_parser_setup(localization_obj)

    print(args)
    # repo_manager_obj = make_repo_manager(repo_list_p=None,
    #                                      config_p=None,
    #                                      language=language)
    #
    # test_cases = ["repo://asset/veh/land/commercial/asset_veh_land_commercial_cargo_truck_A",
    #               "repo://asset/veh/land/commercial/",
    #               "repo://asset/veh/",
    #               "repo://asset/veh/land/commercial",
    #               "repo://asset/veh",
    #               "repo:/asset_veh_land_commercial_cargo_truck_A",
    #               "/asset/veh/land/commercial/asset_veh_land_commercial_cargo_truck_A",
    #               "/asset/veh/land/commercial",
    #               "/asset/veh",
    #               "repo:/"]
    #
    # for test_case in test_cases:
    #     print("\n\n" + test_case)
    #     print(repo_manager_obj.disambiguate_uri(test_case))


# ----------------------------------------------------------------------------------------------------------------------
if __name__ == "__main__":

    main()
    # test()
